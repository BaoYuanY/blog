<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Laravel框架</title>
    <url>/build-admin-yangbaoyuan/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客</title>
    <url>/build-blog/</url>
    <content><![CDATA[<p>11111</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux使用Docker搭建PHP开发环境</title>
    <url>/centos-build-dnmp/</url>
    <content><![CDATA[<h1 id="一-Docker安装"><a href="#一-Docker安装" class="headerlink" title="一. Docker安装"></a>一. Docker安装</h1><a class="button  regular" href='/linux-insert-docker' title='Linux安装Docker'><i class='fa-solid fa-newspaper'></i> Linux安装Docker</a>

<h1 id="二-安装-docker-compose"><a href="#二-安装-docker-compose" class="headerlink" title="二. 安装 docker-compose"></a>二. 安装 <code>docker-compose</code></h1><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment">#慢的话可以用这个</span></span><br><span class="line">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>

<h3 id="2-设置权限"><a href="#2-设置权限" class="headerlink" title="2. 设置权限"></a>2. 设置权限</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>

<h3 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure></div>

<h1 id="三-拉取dnmp环境配置"><a href="#三-拉取dnmp环境配置" class="headerlink" title="三. 拉取dnmp环境配置"></a>三. 拉取dnmp环境配置</h1><p>按需拉取 随便放在一个地方</p>
<div class="tabs" id="tab-代码克隆"><ul class="nav-tabs"><li class="tab active"><a class="#代码克隆-1">gitee</a></li><li class="tab"><a class="#代码克隆-2">github</a></li><li class="tab"><a class="#代码克隆-3">gitlab</a></li></ul><div class="tab-content"><div class="tab-pane active" id="代码克隆-1"><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/baoyuan0304/dnmp.git</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="代码克隆-2"><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b Linux https://github.com/BaoYuanY/dnmp.git</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="代码克隆-3"><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b Linux https://gitlab.yangbaoyuan.cn/BaoYuan/dnmp.git</span><br></pre></td></tr></table></figure></div></div></div></div>

<h1 id="四-配置"><a href="#四-配置" class="headerlink" title="四. 配置"></a>四. 配置</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /www              <span class="comment">#设置挂载目录</span></span><br><span class="line"><span class="built_in">cd</span> /www            </span><br><span class="line">git <span class="built_in">clone</span> ******        <span class="comment">#克隆dnmp代码 </span></span><br><span class="line">vim .<span class="built_in">env</span>                <span class="comment">#编辑 .env</span></span><br><span class="line"><span class="comment">#修改 SOURCE_DIR=/www  </span></span><br></pre></td></tr></table></figure></div>
<p>在dnmp目录下执行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d  <span class="comment">#第一次会先build 时间稍微长一点</span></span><br></pre></td></tr></table></figure></div>


<p><b>然后配置自己的nginx的*****.conf文件</b></p>
<p>DNMP项目特点：</p>
<ol>
<li><code>100%</code>开源</li>
<li><code>100%</code>遵循Docker标准</li>
<li>支持<strong>多版本PHP</strong>共存，可任意切换（PHP5.4、PHP5.6、PHP7.1、PHP7.2、PHP7.3、PHP8.0)</li>
<li>支持绑定<strong>任意多个域名</strong></li>
<li>支持<strong>HTTPS和HTTP&#x2F;2</strong></li>
<li><strong>PHP源代码、MySQL数据、配置文件、日志文件</strong>都可在Host中直接修改查看</li>
<li>内置<strong>完整PHP扩展安装</strong>命令</li>
<li>默认支持<code>pdo_mysql</code>、<code>mysqli</code>、<code>mbstring</code>、<code>gd</code>、<code>curl</code>、<code>opcache</code>等常用热门扩展，根据环境灵活配置</li>
<li>可一键选配常用服务：<ul>
<li>多PHP版本：PHP5.4、PHP5.6、PHP7.1-7.3、PHP8.0</li>
<li>Web服务：Nginx、Openresty</li>
<li>数据库：MySQL5、MySQL8、Redis、memcached、MongoDB、ElasticSearch</li>
<li>消息队列：RabbitMQ</li>
<li>辅助工具：Kibana、Logstash、phpMyAdmin、phpRedisAdmin、AdminMongo</li>
</ul>
</li>
<li>实际项目中应用，确保<code>100%</code>可用</li>
<li>所有镜像源于<a class="link"   href="https://hub.docker.com/" >Docker官方仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，安全可靠</li>
<li>一次配置，<strong>Windows、Linux、MacOs</strong>皆可用</li>
<li>支持快速安装扩展命令 <code>install-php-extensions apcu</code></li>
</ol>
<h1 id="五-dnmp详解"><a href="#五-dnmp详解" class="headerlink" title="五. dnmp详解"></a>五. dnmp详解</h1><h2 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">├── data                        数据库数据目录</span><br><span class="line">│   ├── esdata                  ElasticSearch 数据目录</span><br><span class="line">│   ├── mongo                   MongoDB 数据目录</span><br><span class="line">│   ├── mysql                   MySQL8 数据目录</span><br><span class="line">│   └── mysql5                  MySQL5 数据目录</span><br><span class="line">├── services                    服务构建文件和配置文件目录</span><br><span class="line">│   ├── elasticsearch           ElasticSearch 配置文件目录</span><br><span class="line">│   ├── mysql                   MySQL8 配置文件目录</span><br><span class="line">│   ├── mysql5                  MySQL5 配置文件目录</span><br><span class="line">│   ├── nginx                   Nginx 配置文件目录</span><br><span class="line">│   ├── php                     PHP5.6 - PHP7.3 配置目录</span><br><span class="line">│   ├── php54                   PHP5.4 配置目录</span><br><span class="line">│   └── redis                   Redis 配置目录</span><br><span class="line">├── logs                        日志目录</span><br><span class="line">├── docker-compose.sample.yml   Docker 服务配置示例文件</span><br><span class="line">├── env.smaple                  环境配置示例文件</span><br><span class="line">└── www                         PHP 代码目录</span><br></pre></td></tr></table></figure></div>

<h2 id="2-快速使用"><a href="#2-快速使用" class="headerlink" title="2.快速使用"></a>2.快速使用</h2><ol>
<li>本地安装<ul>
<li><code>git</code></li>
<li><code>Docker</code>(系统需为Linux，Windows 10 Build 15063+，或MacOS 10.12+，且必须要<code>64</code>位）</li>
<li><code>docker-compose 1.7.0+</code></li>
</ul>
</li>
<li><code>clone</code>项目： <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/yeszao/dnmp.git</span><br></pre></td></tr></table></figure></div></li>
<li>如果不是<code>root</code>用户，还需将当前用户加入<code>docker</code>用户组： <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a &#123;USER&#125; docker</span><br></pre></td></tr></table></figure></div></li>
<li>拷贝并命名配置文件（Windows系统请用<code>copy</code>命令），启动： <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd dnmp                                           # 进入项目目录</span><br><span class="line">cp env.sample .env                                # 复制环境变量文件</span><br><span class="line">cp docker-compose.sample.yml docker-compose.yml   # 复制 docker-compose 配置文件。默认启动3个服务：</span><br><span class="line">                                                   # Nginx、PHP7和MySQL8。要开启更多其他服务，如Redis、</span><br><span class="line">                                                   # PHP5.6、PHP5.4、MongoDB，ElasticSearch等，请删</span><br><span class="line">                                                   # 除服务块前的注释</span><br><span class="line">docker-compose up                                 # 启动</span><br></pre></td></tr></table></figure></div></li>
<li>在浏览器中访问：<code>http://localhost</code>或<code>https://localhost</code>(自签名HTTPS演示)就能看到效果，PHP代码在文件<code>./www/localhost/index.php</code>。</li>
</ol>
<h2 id="3-PHP和扩展"><a href="#3-PHP和扩展" class="headerlink" title="3.PHP和扩展"></a>3.PHP和扩展</h2><h3 id="3-1-切换Nginx使用的PHP版本"><a href="#3-1-切换Nginx使用的PHP版本" class="headerlink" title="3.1 切换Nginx使用的PHP版本"></a>3.1 切换Nginx使用的PHP版本</h3><p>首先，需要启动其他版本的PHP，比如PHP5.4，那就先在<code>docker-compose.yml</code>文件中删除PHP5.4前面的注释，再启动PHP5.4容器。</p>
<p>PHP5.4启动后，打开Nginx 配置，修改<code>fastcgi_pass</code>的主机地址，由<code>php</code>改为<code>php54</code>，如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcgi_pass   php:9000;</span><br></pre></td></tr></table></figure></div>
<p>为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcgi_pass   php54:9000;</span><br></pre></td></tr></table></figure></div>
<p>其中 <code>php</code> 和 <code>php54</code> 是<code>docker-compose.yml</code>文件中服务器的名称。</p>
<p>最后，<strong>重启 Nginx</strong> 生效。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx nginx -s reload</span><br></pre></td></tr></table></figure></div>
<p>这里两个<code>nginx</code>，第一个是容器名，第二个是容器中的<code>nginx</code>程序。</p>
<h3 id="3-2-安装PHP扩展"><a href="#3-2-安装PHP扩展" class="headerlink" title="3.2 安装PHP扩展"></a>3.2 安装PHP扩展</h3><p>PHP的很多功能都是通过扩展实现，而安装扩展是一个略费时间的过程，<br>所以，除PHP内置扩展外，在<code>env.sample</code>文件中我们仅默认安装少量扩展，<br>如果要安装更多扩展，请打开你的<code>.env</code>文件修改如下的PHP配置，<br>增加需要的PHP扩展：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">PHP_EXTENSIONS=pdo_mysql,opcache,redis       <span class="comment"># PHP 要安装的扩展列表，英文逗号隔开</span></span><br><span class="line">PHP54_EXTENSIONS=opcache,redis                 <span class="comment"># PHP 5.4要安装的扩展列表，英文逗号隔开</span></span><br></pre></td></tr></table></figure></div>
<p>然后重新build PHP镜像。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose build php</span><br></pre></td></tr></table></figure></div>
<p>可用的扩展请看同文件的<code>env.sample</code>注释块说明。</p>
<h3 id="3-3-快速安装php扩展"><a href="#3-3-快速安装php扩展" class="headerlink" title="3.3 快速安装php扩展"></a>3.3 快速安装php扩展</h3><p>1.进入容器:</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it php /bin/sh</span><br><span class="line"></span><br><span class="line">install-php-extensions apcu </span><br></pre></td></tr></table></figure></div>
<p>2.支持快速安装扩展列表</p>
<!-- START OF EXTENSIONS TABLE -->
<!-- ########################################################### -->
<!-- #                                                         # -->
<!-- #  DO NOT EDIT THIS TABLE: IT IS GENERATED AUTOMATICALLY  # -->
<!-- #                                                         # -->
<!-- #  EDIT THE data/supported-extensions FILE INSTEAD        # -->
<!-- #                                                         # -->
<!-- ########################################################### -->

<p>来自<a class="link"   href="https://github.com/mlocati/docker-php-extension-installer" >https://github.com/mlocati/docker-php-extension-installer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>参考示例文件</p>
<h3 id="3-4-Host中使用php命令行（php-cli）"><a href="#3-4-Host中使用php命令行（php-cli）" class="headerlink" title="3.4 Host中使用php命令行（php-cli）"></a>3.4 Host中使用php命令行（php-cli）</h3><ol>
<li>参考<a href="bash.alias.sample">bash.alias.sample</a>示例文件，将对应 php cli 函数拷贝到主机的 <code>~/.bashrc</code>文件。</li>
<li>让文件起效： <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div></li>
<li>然后就可以在主机中执行php命令了： <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">~ php -v</span><br><span class="line">PHP 7.2.13 (cli) (built: Dec 21 2018 02:22:47) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.2.13, Copyright (c) 1999-2018, by Zend Technologies</span><br><span class="line">    with Xdebug v2.6.1, Copyright (c) 2002-2018, by Derick Rethans</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="3-5-使用composer"><a href="#3-5-使用composer" class="headerlink" title="3.5 使用composer"></a>3.5 使用composer</h3><p><strong>方法1：主机中使用composer命令</strong></p>
<ol>
<li>确定composer缓存的路径。比如，我的dnmp下载在<code>~/dnmp</code>目录，那composer的缓存路径就是<code>~/dnmp/data/composer</code>。</li>
<li>参考<a href="bash.alias.sample">bash.alias.sample</a>示例文件，将对应 php composer 函数拷贝到主机的 <code>~/.bashrc</code>文件。<blockquote>
<p>这里需要注意的是，示例文件中的<code>~/dnmp/data/composer</code>目录需是第一步确定的目录。</p>
</blockquote>
</li>
<li>让文件起效： <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div></li>
<li>在主机的任何目录下就能用composer了： <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dnmp/www/</span><br><span class="line">composer create-project yeszao/fastphp project --no-dev</span><br></pre></td></tr></table></figure></div></li>
<li>（可选）第一次使用 composer 会在 <code>~/dnmp/data/composer</code> 目录下生成一个<strong>config.json</strong>文件，可以在这个文件中指定国内仓库，例如： <div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repositories&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;packagist&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;composer&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://packagist.laravel-china.org&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<strong>方法二：容器内使用composer命令</strong></li>
</ol>
<p>还有另外一种方式，就是进入容器，再执行<code>composer</code>命令，以PHP7容器为例：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it php /bin/sh</span><br><span class="line"><span class="built_in">cd</span> /www/localhost</span><br><span class="line">composer update</span><br></pre></td></tr></table></figure></div>

<h2 id="4-管理命令"><a href="#4-管理命令" class="headerlink" title="4.管理命令"></a>4.管理命令</h2><h3 id="4-1-服务器启动和构建命令"><a href="#4-1-服务器启动和构建命令" class="headerlink" title="4.1 服务器启动和构建命令"></a>4.1 服务器启动和构建命令</h3><p>如需管理服务，请在命令后面加上服务器名称，例如：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up                         <span class="comment"># 创建并且启动所有容器</span></span><br><span class="line">docker-compose up -d                      <span class="comment"># 创建并且后台运行方式启动所有容器</span></span><br><span class="line">docker-compose up nginx php mysql         <span class="comment"># 创建并且启动nginx、php、mysql的多个容器</span></span><br><span class="line">docker-compose up -d nginx php  mysql     <span class="comment"># 创建并且已后台运行的方式启动nginx、php、mysql容器</span></span><br><span class="line">docker-compose start php                  <span class="comment"># 启动服务</span></span><br><span class="line">docker-compose stop php                   <span class="comment"># 停止服务</span></span><br><span class="line">docker-compose restart php                <span class="comment"># 重启服务</span></span><br><span class="line">docker-compose build php                  <span class="comment"># 构建或者重新构建服务</span></span><br><span class="line">docker-compose <span class="built_in">rm</span> php                     <span class="comment"># 删除并且停止php容器</span></span><br><span class="line">docker-compose down                       <span class="comment"># 停止并删除容器，网络，图像和挂载卷</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-2-添加快捷命令"><a href="#4-2-添加快捷命令" class="headerlink" title="4.2 添加快捷命令"></a>4.2 添加快捷命令</h3><p>在开发的时候，我们可能经常使用<code>docker exec -it</code>进入到容器中，把常用的做成命令别名是个省事的方法。</p>
<p>首先，在主机中查看可用的容器：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps           <span class="comment"># 查看所有运行中的容器</span></span><br><span class="line">docker ps -a        <span class="comment"># 所有容器</span></span><br></pre></td></tr></table></figure></div>
<p>输出的<code>NAMES</code>那一列就是容器的名称，如果使用默认配置，那么名称就是<code>nginx</code>、<code>php</code>、<code>php56</code>、<code>mysql</code>等。</p>
<p>然后，打开<code>~/.bashrc</code>或者<code>~/.zshrc</code>文件，加上：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> dnginx=<span class="string">&#x27;docker exec -it nginx /bin/sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dphp=<span class="string">&#x27;docker exec -it php /bin/sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dphp56=<span class="string">&#x27;docker exec -it php56 /bin/sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dphp54=<span class="string">&#x27;docker exec -it php54 /bin/sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dmysql=<span class="string">&#x27;docker exec -it mysql /bin/bash&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dredis=<span class="string">&#x27;docker exec -it redis /bin/sh&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>下次进入容器就非常快捷了，如进入php容器：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">dphp</span><br></pre></td></tr></table></figure></div>

<h3 id="4-3-查看docker网络"><a href="#4-3-查看docker网络" class="headerlink" title="4.3 查看docker网络"></a>4.3 查看docker网络</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ifconfig docker0</span><br></pre></td></tr></table></figure></div>
<p>用于填写<code>extra_hosts</code>容器访问宿主机的<code>hosts</code>地址</p>
<h2 id="5-使用Log"><a href="#5-使用Log" class="headerlink" title="5.使用Log"></a>5.使用Log</h2><p>Log文件生成的位置依赖于conf下各log配置的值。</p>
<h3 id="5-1-Nginx日志"><a href="#5-1-Nginx日志" class="headerlink" title="5.1 Nginx日志"></a>5.1 Nginx日志</h3><p>Nginx日志是我们用得最多的日志，所以我们单独放在根目录<code>log</code>下。</p>
<p><code>log</code>会目录映射Nginx容器的<code>/var/log/nginx</code>目录，所以在Nginx配置文件中，需要输出log的位置，我们需要配置到<code>/var/log/nginx</code>目录，如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">error_log  /var/log/nginx/nginx.localhost.error.log  warn;</span><br></pre></td></tr></table></figure></div>


<h3 id="5-2-PHP-FPM日志"><a href="#5-2-PHP-FPM日志" class="headerlink" title="5.2 PHP-FPM日志"></a>5.2 PHP-FPM日志</h3><p>大部分情况下，PHP-FPM的日志都会输出到Nginx的日志中，所以不需要额外配置。</p>
<p>另外，建议直接在PHP中打开错误日志：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;error_reporting&#x27;</span>, <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="string">&#x27;on&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p>如果确实需要，可按一下步骤开启（在容器中）。</p>
<ol>
<li>进入容器，创建日志文件并修改权限： <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it php /bin/sh</span><br><span class="line"><span class="built_in">mkdir</span> /var/log/php</span><br><span class="line"><span class="built_in">cd</span> /var/log/php</span><br><span class="line"><span class="built_in">touch</span> php-fpm.error.log</span><br><span class="line"><span class="built_in">chmod</span> a+w php-fpm.error.log</span><br></pre></td></tr></table></figure></div></li>
<li>主机上打开并修改PHP-FPM的配置文件<code>conf/php-fpm.conf</code>，找到如下一行，删除注释，并改值为： <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_admin_value[error_log] = /var/log/php/php-fpm.error.log</span><br></pre></td></tr></table></figure></div></li>
<li>重启PHP-FPM容器。</li>
</ol>
<h3 id="5-3-MySQL日志"><a href="#5-3-MySQL日志" class="headerlink" title="5.3 MySQL日志"></a>5.3 MySQL日志</h3><p>因为MySQL容器中的MySQL使用的是<code>mysql</code>用户启动，它无法自行在<code>/var/log</code>下的增加日志文件。所以，我们把MySQL的日志放在与data一样的目录，即项目的<code>mysql</code>目录下，对应容器中的<code>/var/lib/mysql/</code>目录。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">slow-query-log-file     = /var/lib/mysql/mysql.slow.log</span><br><span class="line">log-error               = /var/lib/mysql/mysql.error.log</span><br></pre></td></tr></table></figure></div>
<p>以上是mysql.conf中的日志文件的配置。</p>
<h2 id="6-数据库管理"><a href="#6-数据库管理" class="headerlink" title="6.数据库管理"></a>6.数据库管理</h2><p>本项目默认在<code>docker-compose.yml</code>中不开启了用于MySQL在线管理的<em>phpMyAdmin</em>，以及用于redis在线管理的<em>phpRedisAdmin</em>，可以根据需要修改或删除。</p>
<h3 id="6-1-phpMyAdmin"><a href="#6-1-phpMyAdmin" class="headerlink" title="6.1 phpMyAdmin"></a>6.1 phpMyAdmin</h3><p>phpMyAdmin容器映射到主机的端口地址是：<code>8080</code>，所以主机上访问phpMyAdmin的地址是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure></div>

<p>MySQL连接信息：</p>
<ul>
<li>host：(本项目的MySQL容器网络)</li>
<li>port：<code>3306</code></li>
<li>username：（手动在phpmyadmin界面输入）</li>
<li>password：（手动在phpmyadmin界面输入）</li>
</ul>
<h3 id="6-2-phpRedisAdmin"><a href="#6-2-phpRedisAdmin" class="headerlink" title="6.2 phpRedisAdmin"></a>6.2 phpRedisAdmin</h3><p>phpRedisAdmin容器映射到主机的端口地址是：<code>8081</code>，所以主机上访问phpMyAdmin的地址是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8081</span><br></pre></td></tr></table></figure></div>

<p>Redis连接信息如下：</p>
<ul>
<li>host: (本项目的Redis容器网络)</li>
<li>port: <code>6379</code></li>
</ul>
<h2 id="7-在正式环境中安全使用"><a href="#7-在正式环境中安全使用" class="headerlink" title="7.在正式环境中安全使用"></a>7.在正式环境中安全使用</h2><p>要在正式环境中使用，请：</p>
<ol>
<li>在php.ini中关闭XDebug调试</li>
<li>增强MySQL数据库访问的安全策略</li>
<li>增强redis访问的安全策略</li>
</ol>
<h2 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8 常见问题"></a>8 常见问题</h2><h3 id="8-1-如何在PHP代码中使用curl？"><a href="#8-1-如何在PHP代码中使用curl？" class="headerlink" title="8.1 如何在PHP代码中使用curl？"></a>8.1 如何在PHP代码中使用curl？</h3><p>参考这个issue：<a class="link"   href="https://github.com/YBY-BaoYuan/dnmp/issues/91" >https://github.com/YBY-BaoYuan/dnmp/issues/91 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="8-2-Docker使用cron定时任务"><a href="#8-2-Docker使用cron定时任务" class="headerlink" title="8.2 Docker使用cron定时任务"></a>8.2 Docker使用cron定时任务</h3><p><a class="link"   href="https://www.awaimai.com/2615.html" >Docker使用cron定时任务 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="8-3-Docker容器时间"><a href="#8-3-Docker容器时间" class="headerlink" title="8.3 Docker容器时间"></a>8.3 Docker容器时间</h3><p>容器时间在.env文件中配置<code>TZ</code>变量，所有支持的时区请看<a class="link"   href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" >时区列表·维基百科 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>或者<a class="link"   href="https://www.php.net/manual/zh/timezones.php" >PHP所支持的时区列表·PHP官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="8-4-如何连接MySQL和Redis服务器"><a href="#8-4-如何连接MySQL和Redis服务器" class="headerlink" title="8.4 如何连接MySQL和Redis服务器"></a>8.4 如何连接MySQL和Redis服务器</h3><p>这要分两种情况，</p>
<p>第一种情况，在<strong>PHP代码中</strong>。</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接MySQL</span></span><br><span class="line">dbh = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=mysql;dbname=mysql&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接Redis</span></span><br><span class="line">redis = <span class="keyword">new</span> <span class="title class_">Redis</span>();</span><br><span class="line">redis-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;redis&#x27;</span>, <span class="number">6379</span>);</span><br></pre></td></tr></table></figure></div>
<p>因为容器与容器是<code>expose</code>端口联通的，而且在同一个<code>networks</code>下，所以连接的<code>host</code>参数直接用容器名称，<code>port</code>参数就是容器内部的端口。更多请参考<a class="link"   href="https://www.awaimai.com/2138.html" >《docker-compose ports和expose的区别》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p>第二种情况，<strong>在主机中</strong>通过<strong>命令行</strong>或者<strong>Navicat</strong>等工具连接。主机要连接mysql和redis的话，要求容器必须经过<code>ports</code>把端口映射到主机了。以 mysql 为例，<code>docker-compose.yml</code>文件中有这样的<code>ports</code>配置：<code>3306:3306</code>，就是主机的3306和容器的3306端口形成了映射，所以我们可以这样连接：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h127.0.0.1 -uroot -p123456 -P3306</span><br><span class="line">redis-cli -h127.0.0.1</span><br></pre></td></tr></table></figure></div>
<p>这里<code>host</code>参数不能用localhost是因为它默认是通过sock文件与mysql通信，而容器与主机文件系统已经隔离，所以需要通过TCP方式连接，所以需要指定IP。</p>
<h3 id="8-5-容器内的php如何连接宿主机MySQL"><a href="#8-5-容器内的php如何连接宿主机MySQL" class="headerlink" title="8.5 容器内的php如何连接宿主机MySQL"></a>8.5 容器内的php如何连接宿主机MySQL</h3><p>1.宿主机执行<code>ifconfig docker0</code>得到<code>inet</code>就是要连接的<code>ip</code>地址</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"> ifconfig docker0</span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></div>
<p>2.运行宿主机Mysql命令行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"> mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class="line"> mysql&gt;flush privileges;</span><br><span class="line">// 其中各字符的含义：</span><br><span class="line">// *.* 对任意数据库任意表有效</span><br><span class="line">// &quot;root&quot; &quot;123456&quot; 是数据库用户名和密码</span><br><span class="line">// &#x27;%&#x27; 允许访问数据库的IP地址，%意思是任意IP，也可以指定IP</span><br><span class="line">// flush privileges 刷新权限信息</span><br></pre></td></tr></table></figure></div>

<p>3.接着直接php容器使用<code>172.0.17.1:3306</code>连接即可</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>dnmp</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS有关SSH配置</title>
    <url>/centos-ssh-login/</url>
    <content><![CDATA[<h1 id="SSH的安装"><a href="#SSH的安装" class="headerlink" title="SSH的安装"></a>SSH的安装</h1><ol>
<li><p>首先，确保已在CentOS服务器上安装了openssh-server。通过运行以下命令检查是否已安装：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum list installed | grep openssh-server</span><br></pre></td></tr></table></figure></div>
<p>如果未安装，请使用以下命令安装：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install openssh-server</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动SSH服务并设置为开机自启动：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo systemctl enable sshd</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用防火墙允许SSH连接。防火墙默认情况下会阻止SSH连接，因此需要通过以下命令打开SSH端口：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=ssh</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
<p>或者，如果要打开某个特定端口，如22，使用以下命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-port=22/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编辑SSH配置文件，以添加或修改配置。使用文本编辑器编辑<code>/etc/ssh/sshd_config</code>文件：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></div>
<p>常见的配置选项包括：</p>
<ul>
<li>禁用ROOT登录：<code>PermitRootLogin no</code>。建议禁用Root登录，以增加安全性。</li>
<li>禁止密码登录：<code>PasswordAuthentication no</code>。</li>
<li>开始ssh登录：<code>PubkeyAuthentication yes</code>。</li>
<li>更改默认端口：将<code>Port</code>选项更改为所需端口（如<code>Port 2222</code>）。这可以帮助减少暴力攻击。</li>
<li>限制用户访问：例如，要仅允许用户alice和bob登录，需要添加<code>AllowUsers alice bob</code>。</li>
</ul>
<p>在编辑配置文件后，保存并关闭文件。</p>
</li>
<li><p>重启SSH服务，使更改生效：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置客户端。要从客户端登录到SSH服务器，需要在客户端生成SSH密钥（公钥和私钥）。在客户端运行以下命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></div>
<p>按照提示操作，您将会创建一个新的密钥对。然后将公钥添加到CentOS服务器的<code>~/.ssh/authorized_keys</code>文件中：</p>
<p>如果是非root用户要设置文件夹或者文件权限</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></div>
<p>登录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id user@your_server_ip</span><br></pre></td></tr></table></figure></div>
<p>（将’user’和’your_server_ip’替换为实际的值）</p>
</li>
<li><p>现在您已经配置好SSH登录了。要登录到远程服务器，请从客户端运行以下命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ssh user@your_server_ip</span><br></pre></td></tr></table></figure></div>
<p>（将’user’和’your_server_ip’替换为实际的值）</p>
</li>
</ol>
<p>就这样，您已经配置并从客户端访问了新的CentOS服务器。保持登录安全！</p>
<h1 id="ssh空闲超时时间检测"><a href="#ssh空闲超时时间检测" class="headerlink" title="ssh空闲超时时间检测"></a>ssh空闲超时时间检测</h1><ol>
<li>使用文本编辑器（例如vi,nano,vim）编辑配置文件<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></div></li>
<li>找到 <code>ClientAliveInterval</code> 设置为600到900之间</li>
<li>重启 SSH 服务以使更改生效<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h1 id="使用加密的远程管理ssh"><a href="#使用加密的远程管理ssh" class="headerlink" title="使用加密的远程管理ssh"></a>使用加密的远程管理ssh</h1><p><b>未使用安全套接字（如SSH）加密远程管理服务器可能会导致以下危害：</b></p>
<ul>
<li>数据泄露：未加密的通信容易被截获和窃听。黑客可以捕获传输中的敏感数据，如用户名、密码、配置文件和其他重要信息。</li>
<li>中间人攻击：未加密的连接容易受到中间人攻击。攻击者可能会拦截通信，修改数据，然后将其传输到接收者，而双方可能都不知道通信已被篡改。</li>
<li>暴力破解攻击：当传输未加密的用户名和密码时，攻击者可以尝试破解这些凭据以访问服务器。如果它们使用了弱密码，攻击者可能很容易就能破解密码。</li>
<li>会话劫持：在未加密的连接中，攻击者可以劫持用户会话，然后使用已登录的凭据对服务器进行操作。</li>
<li>恶意软件和后门程序：攻击者可能会通过未加密的连接传播恶意软件或植入后门，以便在以后对服务器进行攻击。这可能会导致数据损坏、丢失或被盗。</li>
<li>泄露IP地址：未加密的连接也会泄露使用者的IP地址，这可能导致IP被跟踪，进一步增加黑客攻击发现的可能性。</li>
</ul>
<ol>
<li>在sshd_config中添加或设置 <code>Protocol 2</code> <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></div></li>
<li>重启 SSH 服务以使更改生效<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h1 id="设置ssh登录白名单"><a href="#设置ssh登录白名单" class="headerlink" title="设置ssh登录白名单"></a>设置ssh登录白名单</h1><ol>
<li>在<code>/etc/hosts.deny</code>添加 <code>ALL:ALL</code></li>
<li>在<code>/etc/hosts.allow</code>添加 <code>sshd:192.168.1.1</code> <blockquote>
<p>192.168.1.1只是一个示例  需要根据自己情况去配置</p>
</blockquote>
</li>
</ol>
<h1 id="配置命令行超时退出"><a href="#配置命令行超时退出" class="headerlink" title="配置命令行超时退出"></a>配置命令行超时退出</h1><p><b>未配置命令行超时退出（也称为闲置超时）可能会带来以下隐患：</b></p>
<ul>
<li>未授权访问：如果有人在用户离开计算机时尝试访问已登录的SSH会话，他们可能会有权限执行高级任务或对系统进行更改。这特别适用于具有sudo权限的用户，因为他们能够执行危险的系统操作。</li>
<li>资源占用：对于运行多个SSH会话的用户，很容易忘记关闭其中的某个。这可能导致系统资源被长期占用，从而降低服务器的整体性能。</li>
<li>难以进行故障排查：如果没有超时设置，系统管理员在分析系统日志时可能发现很多未结束的SSH会话。这会使他们难以确定哪个SSH会话是可疑的或导致问题的，从而增加排查问题的难度。</li>
</ul>
<ol>
<li>在<code>/etc/profile</code>中添加<code>tmout=300</code><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure></div></li>
<li>使更改生效<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Linux安装Docker</title>
    <url>/linux-insert-docker/</url>
    <content><![CDATA[<h2 id="安装额外的工具"><a href="#安装额外的工具" class="headerlink" title="安装额外的工具"></a>安装额外的工具</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure></div>


<h2 id="一-如果之前安装过Docker，可以使用下面命令卸载"><a href="#一-如果之前安装过Docker，可以使用下面命令卸载" class="headerlink" title="一. 如果之前安装过Docker，可以使用下面命令卸载"></a>一. 如果之前安装过Docker，可以使用下面命令卸载</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure></div>

<h2 id="二-设置Docker镜像源"><a href="#二-设置Docker镜像源" class="headerlink" title="二. 设置Docker镜像源"></a>二. 设置Docker镜像源</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></div>


<h2 id="三-安装"><a href="#三-安装" class="headerlink" title="三. 安装"></a>三. 安装</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure></div>


<h2 id="四-启动、停止、重启docker命令"><a href="#四-启动、停止、重启docker命令" class="headerlink" title="四. 启动、停止、重启docker命令"></a>四. 启动、停止、重启docker命令</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动docker服务</span></span><br><span class="line">systemctl start docker  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止docker服务</span></span><br><span class="line">systemctl stop docker  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">systemctl restart docker  </span><br></pre></td></tr></table></figure></div>


<p>输入 <code>systemctl status docker</code> 查看docker启动状态 如下图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux-insert-docker/docker-status.png"
                      alt="image"
                ></p>
<p>输入 <code>docker -v</code> 查看docker版本</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux-insert-docker/docker-version.png"
                      alt="image"
                ></p>
<h2 id="五-配置镜像加速"><a href="#五-配置镜像加速" class="headerlink" title="五. 配置镜像加速"></a>五. 配置镜像加速</h2><p>可以使用自己的阿里云账号配置(没有账号的话建议注册一下) 详情查看文档 &#x3D;&#x3D;&#x3D;&gt; <a herf="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">容器镜像服务</a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux-insert-docker/docker-mirrors.png"
                      alt="image"
                ></p>
<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo前缀针对非root用户且有sudo权限的用户 视情况加与不加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将配置写入文件</span></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://7pvmk0yu.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></div>

<h2 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h2><p>如果遇到一些问题 可以试着关闭防火墙后重试</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否关闭防火墙</span></span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure></div>






]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP一些函数方法汇总</title>
    <url>/php-function/</url>
    <content><![CDATA[<h1 id="数组多键排序"><a href="#数组多键排序" class="headerlink" title="数组多键排序"></a>数组多键排序</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$tempArr</span> = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chinese&#x27;</span> =&gt; <span class="string">&#x27;99&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;math&#x27;</span>    =&gt; <span class="string">&#x27;91&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;english&#x27;</span> =&gt; <span class="string">&#x27;87&#x27;</span>,</span><br><span class="line">    ], [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="string">&#x27;小华&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chinese&#x27;</span> =&gt; <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;math&#x27;</span>    =&gt; <span class="string">&#x27;94&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;english&#x27;</span> =&gt; <span class="string">&#x27;89&#x27;</span>,</span><br><span class="line">    ], [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chinese&#x27;</span> =&gt; <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;math&#x27;</span>    =&gt; <span class="string">&#x27;91&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;english&#x27;</span> =&gt; <span class="string">&#x27;98&#x27;</span>,</span><br><span class="line">    ], [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="string">&#x27;小丽&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chinese&#x27;</span> =&gt; <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;math&#x27;</span>    =&gt; <span class="string">&#x27;94&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;english&#x27;</span> =&gt; <span class="string">&#x27;98&#x27;</span>,</span><br><span class="line">    ], [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="string">&#x27;小强&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chinese&#x27;</span> =&gt; <span class="string">&#x27;98&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;math&#x27;</span>    =&gt; <span class="string">&#x27;92&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;english&#x27;</span> =&gt; <span class="string">&#x27;87&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="variable">$sorted</span> = <span class="title function_ invoke__">collect</span>(<span class="variable">$tempArr</span>)-&gt;<span class="title function_ invoke__">sortBy</span>(function (<span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%d-%s-%s&#x27;</span>, <span class="variable">$item</span>[<span class="string">&#x27;chinese&#x27;</span>], <span class="variable">$item</span>[<span class="string">&#x27;math&#x27;</span>], <span class="variable">$item</span>[<span class="string">&#x27;english&#x27;</span>]);</span><br><span class="line">&#125;, SORT_REGULAR, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sorted</span>-&gt;<span class="title function_ invoke__">each</span>(function (<span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$item</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="title function_ invoke__">collect</span>(<span class="variable">$tempArr</span>)-&gt;<span class="title function_ invoke__">sort</span>(function (<span class="variable">$a</span>, <span class="variable">$b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span>[<span class="string">&#x27;chinese&#x27;</span>] != <span class="variable">$b</span>[<span class="string">&#x27;chinese&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$b</span>[<span class="string">&#x27;chinese&#x27;</span>] &lt;=&gt; <span class="variable">$a</span>[<span class="string">&#x27;chinese&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span>[<span class="string">&#x27;math&#x27;</span>] != <span class="variable">$b</span>[<span class="string">&#x27;math&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$b</span>[<span class="string">&#x27;math&#x27;</span>] &lt;=&gt; <span class="variable">$a</span>[<span class="string">&#x27;math&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$b</span>[<span class="string">&#x27;english&#x27;</span>] &lt;=&gt; <span class="variable">$a</span>[<span class="string">&#x27;english&#x27;</span>];</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">each</span>(function (<span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$item</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><ol>
<li>定义一个 $tempArr 数组，包含了 5 名学生的姓名（name）、语文成绩（chinese）、数学成绩（math）以及英语成绩（english）。</li>
<li>使用 Laravel 的 <code>collect()</code> 函数把 <code>$tempArr</code> 数组转换成一个集合（Collection）对象，然后调用 <code>sortBy()</code>方法对集合中的元素进行排序。<code>sortBy()</code> 方法需要一个回调函数作为参数，这个回调函数决定了排序的规则。</li>
<li>在回调函数内部，使用 sprintf() 函数为每个学生生成一个字符串，格式为：<code>chinese-math-english</code>。这个字符串将作为排序的依据。</li>
<li><code>sortBy()</code> 方法还有两个额外的参数：排序依据类型（<code>SORT_REGULAR</code>）和排序方向（<code>true</code>）。这里设置为 <code>SORT_REGULAR</code> 说明按照正常比较的方式（即数字按大小，字符串按字典序）进行排序，<code>true</code> 表示降序排序（从大到小）。</li>
<li>排序完成后，使用 <code>each()</code> 方法依次迭代集合中的元素。<code>each()</code> 方法接受一个回调函数作为参数，在此回调函数内部，可以访问到当前元素以及元素的索引（键值）。</li>
</ol>
<h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><ol>
<li>首先比较两个元素的<code>chinese</code>。如果它们不相等，则用合并比较运算符<code>&lt;=&gt;</code>比较它们，并返回结果。注意：<code>$b[&#39;chinese&#39;] &lt;=&gt; $a[&#39;chinese&#39;]</code> 这种写法是为了降序排列。因此，成绩较高的元素会排在较低的元素之前。</li>
<li>如果<code>chinese</code>相等，比较函数会继续比较两个元素的<code>math</code>。如果它们不相等，同样使用合并比较运算符<code>&lt;=&gt;</code>进行比较，并返回结果。这里同样是降序排列。</li>
<li>如果<code>math</code>也相等，最后比较<code>english</code>。与前两次比较一样，使用合并比较运算符<code>&lt;=&gt;</code>进行降序排序。</li>
</ol>
<h1 id="查询任意一个字符串是否存在另一个字符串中"><a href="#查询任意一个字符串是否存在另一个字符串中" class="headerlink" title="查询任意一个字符串是否存在另一个字符串中"></a>查询任意一个字符串是否存在另一个字符串中</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$match</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$string</span>, <span class="variable">$keywords</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/(&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$keywords</span>) . <span class="string">&#x27;)/&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">bool</span>) <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$keywords</span> = [<span class="string">&#x27;物流&#x27;</span>, <span class="string">&#x27;配送&#x27;</span>, <span class="string">&#x27;送货&#x27;</span>, <span class="string">&#x27;司机&#x27;</span>];</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;这里有一个关于物流配送的例子&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$match</span>(<span class="variable">$string</span>, <span class="variable">$keywords</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出true</span></span><br></pre></td></tr></table></figure></div>











]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP坐标转换类</title>
    <url>/php_coordinate/</url>
    <content><![CDATA[   <div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">   <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Service</span>\<span class="title class_">Common</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoordinateService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">x_PI</span> = <span class="number">52.35987755982988</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PI</span>   = <span class="number">3.1415926535897932384626</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">a</span>    = <span class="number">6378245.0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ee</span>   = <span class="number">0.00669342162296594323</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//高德地图用的就是火星坐标系(GCJ-02)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 百度坐标系(BD-09) 转 火星坐标系(GCJ-02)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $bd_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $bd_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bd09ToGcj02</span>(<span class="params"><span class="variable">$bd_lon</span>, <span class="variable">$bd_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$x</span>     = <span class="variable">$bd_lon</span> - <span class="number">0.0065</span>;</span><br><span class="line">        <span class="variable">$y</span>     = <span class="variable">$bd_lat</span> - <span class="number">0.006</span>;</span><br><span class="line">        <span class="variable">$z</span>     = <span class="title function_ invoke__">sqrt</span>(<span class="variable">$x</span> * <span class="variable">$x</span> + <span class="variable">$y</span> * <span class="variable">$y</span>) - <span class="number">0.00002</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$y</span> * <span class="built_in">self</span>::<span class="variable constant_">x_PI</span>);</span><br><span class="line">        <span class="variable">$theta</span> = <span class="title function_ invoke__">atan2</span>(<span class="variable">$y</span>, <span class="variable">$x</span>) - <span class="number">0.000003</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$x</span> * <span class="built_in">self</span>::<span class="variable constant_">x_PI</span>);</span><br><span class="line">        <span class="variable">$g_lon</span> = <span class="variable">$z</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$theta</span>);</span><br><span class="line">        <span class="variable">$g_lat</span> = <span class="variable">$z</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$theta</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;lon&#x27;</span> =&gt; <span class="variable">$g_lon</span>, <span class="string">&#x27;lat&#x27;</span> =&gt; <span class="variable">$g_lat</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 火星坐标系(GCJ-02) 转 百度坐标系(BD-09)</span></span><br><span class="line"><span class="comment">     * 即谷歌、高德 转 百度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $g_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $g_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">gcj02Tobd09</span>(<span class="params"><span class="variable">$g_lon</span>, <span class="variable">$g_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$z</span>      = <span class="title function_ invoke__">sqrt</span>(<span class="variable">$g_lon</span> * <span class="variable">$g_lon</span> + <span class="variable">$g_lat</span> * <span class="variable">$g_lat</span>) + <span class="number">0.00002</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$g_lat</span> * <span class="built_in">self</span>::<span class="variable constant_">x_PI</span>);</span><br><span class="line">        <span class="variable">$theta</span>  = <span class="title function_ invoke__">atan2</span>(<span class="variable">$g_lat</span>, <span class="variable">$g_lon</span>) + <span class="number">0.000003</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$g_lon</span> * <span class="built_in">self</span>::<span class="variable constant_">x_PI</span>);</span><br><span class="line">        <span class="variable">$bd_lon</span> = <span class="variable">$z</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$theta</span>) + <span class="number">0.0065</span>;</span><br><span class="line">        <span class="variable">$bd_lat</span> = <span class="variable">$z</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$theta</span>) + <span class="number">0.006</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;lon&#x27;</span> =&gt; <span class="variable">$bd_lon</span>, <span class="string">&#x27;lat&#x27;</span> =&gt; <span class="variable">$bd_lat</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WGS84 转 GCj02</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $w_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $w_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">wgs84ToGcj02</span>(<span class="params"><span class="variable">$w_lon</span>, <span class="variable">$w_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$dlat</span>      = <span class="built_in">self</span>::<span class="title function_ invoke__">transFormLat</span>(<span class="variable">$w_lon</span> - <span class="number">105.0</span>, <span class="variable">$w_lat</span> - <span class="number">35.0</span>);</span><br><span class="line">        <span class="variable">$dlon</span>      = <span class="built_in">self</span>::<span class="title function_ invoke__">transFormLon</span>(<span class="variable">$w_lon</span> - <span class="number">105.0</span>, <span class="variable">$w_lat</span> - <span class="number">35.0</span>);</span><br><span class="line">        <span class="variable">$radlat</span>    = <span class="variable">$w_lat</span> / <span class="number">180.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>;</span><br><span class="line">        <span class="variable">$magic</span>     = <span class="title function_ invoke__">sin</span>(<span class="variable">$radlat</span>);</span><br><span class="line">        <span class="variable">$magic</span>     = <span class="number">1</span> - <span class="built_in">self</span>::<span class="variable constant_">ee</span> * <span class="variable">$magic</span> * <span class="variable">$magic</span>;</span><br><span class="line">        <span class="variable">$sqrtmagic</span> = <span class="title function_ invoke__">sqrt</span>(<span class="variable">$magic</span>);</span><br><span class="line">        <span class="variable">$dlat</span>      = (<span class="variable">$dlat</span> * <span class="number">180.0</span>) / ((<span class="built_in">self</span>::<span class="variable constant_">a</span> * (<span class="number">1</span> - <span class="built_in">self</span>::<span class="variable constant_">ee</span>)) / (<span class="variable">$magic</span> * <span class="variable">$sqrtmagic</span>) * <span class="built_in">self</span>::<span class="variable constant_">PI</span>);</span><br><span class="line">        <span class="variable">$dlon</span>      = (<span class="variable">$dlon</span> * <span class="number">180.0</span>) / (<span class="built_in">self</span>::<span class="variable constant_">a</span> / <span class="variable">$sqrtmagic</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$radlat</span>) * <span class="built_in">self</span>::<span class="variable constant_">PI</span>);</span><br><span class="line">        <span class="variable">$g_lat</span>     = <span class="variable">$w_lat</span> + <span class="variable">$dlat</span>;</span><br><span class="line">        <span class="variable">$g_lon</span>     = <span class="variable">$w_lon</span> + <span class="variable">$dlon</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;lon&#x27;</span> =&gt; <span class="variable">$g_lon</span>, <span class="string">&#x27;lat&#x27;</span> =&gt; <span class="variable">$g_lat</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GCJ02 转换为 WGS84</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $g_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $g_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">gcj02ToWgs84</span>(<span class="params"><span class="variable">$g_lon</span>, <span class="variable">$g_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$dlat</span>      = <span class="built_in">self</span>::<span class="title function_ invoke__">transFormLat</span>(<span class="variable">$g_lon</span> - <span class="number">105.0</span>, <span class="variable">$g_lat</span> - <span class="number">35.0</span>);</span><br><span class="line">        <span class="variable">$dlon</span>      = <span class="built_in">self</span>::<span class="title function_ invoke__">transFormLon</span>(<span class="variable">$g_lon</span> - <span class="number">105.0</span>, <span class="variable">$g_lat</span> - <span class="number">35.0</span>);</span><br><span class="line">        <span class="variable">$radlat</span>    = <span class="variable">$g_lat</span> / <span class="number">180.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>;</span><br><span class="line">        <span class="variable">$magic</span>     = <span class="title function_ invoke__">sin</span>(<span class="variable">$radlat</span>);</span><br><span class="line">        <span class="variable">$magic</span>     = <span class="number">1</span> - <span class="built_in">self</span>::<span class="variable constant_">ee</span> * <span class="variable">$magic</span> * <span class="variable">$magic</span>;</span><br><span class="line">        <span class="variable">$sqrtmagic</span> = <span class="title function_ invoke__">sqrt</span>(<span class="variable">$magic</span>);</span><br><span class="line">        <span class="variable">$dlat</span>      = (<span class="variable">$dlat</span> * <span class="number">180.0</span>) / ((<span class="built_in">self</span>::<span class="variable constant_">a</span> * (<span class="number">1</span> - <span class="built_in">self</span>::<span class="variable constant_">ee</span>)) / (<span class="variable">$magic</span> * <span class="variable">$sqrtmagic</span>) * <span class="built_in">self</span>::<span class="variable constant_">PI</span>);</span><br><span class="line">        <span class="variable">$dlon</span>      = (<span class="variable">$dlon</span> * <span class="number">180.0</span>) / (<span class="built_in">self</span>::<span class="variable constant_">a</span> / <span class="variable">$sqrtmagic</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$radlat</span>) * <span class="built_in">self</span>::<span class="variable constant_">PI</span>);</span><br><span class="line">        <span class="variable">$w_lat</span>     = <span class="variable">$g_lat</span> + <span class="variable">$dlat</span>;</span><br><span class="line">        <span class="variable">$w_lon</span>     = <span class="variable">$g_lon</span> + <span class="variable">$dlon</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;lon&#x27;</span> =&gt; <span class="variable">$w_lon</span>, <span class="string">&#x27;lat&#x27;</span> =&gt; <span class="variable">$w_lat</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BD09 转换为 WGS84</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $bd_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $bd_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bd09ToWgs84</span>(<span class="params"><span class="variable">$bd_lon</span>, <span class="variable">$bd_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$gcj02</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">bd09ToGcj02</span>(<span class="variable">$bd_lon</span>, <span class="variable">$bd_lat</span>);</span><br><span class="line">        <span class="variable">$g_lon</span> = <span class="variable">$gcj02</span>[<span class="string">&#x27;lon&#x27;</span>];</span><br><span class="line">        <span class="variable">$g_lat</span> = <span class="variable">$gcj02</span>[<span class="string">&#x27;lat&#x27;</span>];</span><br><span class="line">        <span class="variable">$wgs84</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">gcj02ToWgs84</span>(<span class="variable">$g_lon</span>, <span class="variable">$g_lat</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$wgs84</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WGS84 转换为 BD09</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $w_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $w_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">wgs84ToBd09</span>(<span class="params"><span class="variable">$w_lon</span>, <span class="variable">$w_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$gcj02</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">wgs84ToGcj02</span>(<span class="variable">$w_lon</span>, <span class="variable">$w_lat</span>);</span><br><span class="line">        <span class="variable">$g_lon</span> = <span class="variable">$gcj02</span>[<span class="string">&#x27;lon&#x27;</span>];</span><br><span class="line">        <span class="variable">$g_lat</span> = <span class="variable">$gcj02</span>[<span class="string">&#x27;lat&#x27;</span>];</span><br><span class="line">        <span class="variable">$bd09</span>  = <span class="built_in">self</span>::<span class="title function_ invoke__">gcj02Tobd09</span>(<span class="variable">$g_lon</span>, <span class="variable">$g_lat</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$bd09</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">transFormLat</span>(<span class="params"><span class="variable">$lon</span>, <span class="variable">$lat</span></span>): <span class="title">float</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = -<span class="number">100.0</span> + <span class="number">2.0</span> * <span class="variable">$lon</span> + <span class="number">3.0</span> * <span class="variable">$lat</span> + <span class="number">0.2</span> * <span class="variable">$lat</span> * <span class="variable">$lat</span> + <span class="number">0.1</span> * <span class="variable">$lon</span> * <span class="variable">$lat</span> + <span class="number">0.2</span> * <span class="title function_ invoke__">sqrt</span>(<span class="title function_ invoke__">abs</span>(<span class="variable">$lon</span>));</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="number">6.0</span> * <span class="variable">$lon</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="number">2.0</span> * <span class="variable">$lon</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lat</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">40.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lat</span> / <span class="number">3.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">160.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lat</span> / <span class="number">12.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">320</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lat</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span> / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换经度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">transFormLon</span>(<span class="params"><span class="variable">$lon</span>, <span class="variable">$lat</span></span>): <span class="title">float</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="number">300.0</span> + <span class="variable">$lon</span> + <span class="number">2.0</span> * <span class="variable">$lat</span> + <span class="number">0.1</span> * <span class="variable">$lon</span> * <span class="variable">$lon</span> + <span class="number">0.1</span> * <span class="variable">$lon</span> * <span class="variable">$lat</span> + <span class="number">0.1</span> * <span class="title function_ invoke__">sqrt</span>(<span class="title function_ invoke__">abs</span>(<span class="variable">$lon</span>));</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="number">6.0</span> * <span class="variable">$lon</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="number">2.0</span> * <span class="variable">$lon</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lon</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">40.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lon</span> / <span class="number">3.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">150.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lon</span> / <span class="number">12.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">300.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lon</span> / <span class="number">30.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>






]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
