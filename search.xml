<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Laravel</title>
    <url>/build-admin-yangbaoyuan/</url>
    <content><![CDATA[<div class="note-large blue"><div class="notel-title"><p>环境配置</p>
</div><div class="notel-content"><p>Server: <code>CentOS Linux release 7.9.2009 (Core)</code><br>Docker: <code>24.0.4</code><br>Docker-compose: <code>1.29.2</code><br>PHP: <code>7.4.27</code><br>Composer: <code>2.5.8</code><br>Laravel: <code>8.5</code><br>Redis: <code>6.2.6</code><br>Mysql: <code>8.0.27</code></p>
</div></div>
<h2 id="admin-yangbaoyuan-cn"><a href="#admin-yangbaoyuan-cn" class="headerlink" title="admin.yangbaoyuan.cn"></a>admin.yangbaoyuan.cn</h2><p>项目地址:  <a class="button  regular" href='https://gitlab.yangbaoyuan.cn/BaoYuan/admin.yangbaoyuan' title='Gitlab'><i class='fa-brands fa-gitlab'></i> Gitlab</a></p>
<h3 id="migration-相关"><a href="#migration-相关" class="headerlink" title="migration 相关"></a>migration 相关</h3><h4 id="添加表备注"><a href="#添加表备注" class="headerlink" title="添加表备注"></a>添加表备注</h4><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加到对应的migration文件中</span></span><br><span class="line">\Illuminate\Support\Facades\DB::<span class="title function_ invoke__">statement</span>(<span class="string">&quot;ALTER TABLE `table` COMMENT &#x27;********&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure></div>
<h3 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h3><h4 id="1-docker内权限配置"><a href="#1-docker内权限配置" class="headerlink" title="1. docker内权限配置"></a>1. docker内权限配置</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chown -hR 1000:1000 /www</span><br></pre></td></tr></table></figure></div>




]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客</title>
    <url>/build-blog/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux使用Docker搭建PHP开发环境</title>
    <url>/centos-build-dnmp/</url>
    <content><![CDATA[<h1 id="一-Docker安装"><a href="#一-Docker安装" class="headerlink" title="一. Docker安装"></a>一. Docker安装</h1><a class="button  regular" href='/linux-insert-docker' title='Linux安装Docker'><i class='fa-solid fa-newspaper'></i> Linux安装Docker</a>

<h1 id="二-安装-docker-compose"><a href="#二-安装-docker-compose" class="headerlink" title="二. 安装 docker-compose"></a>二. 安装 <code>docker-compose</code></h1><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment">#慢的话可以用这个</span></span><br><span class="line">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>

<h3 id="2-设置权限"><a href="#2-设置权限" class="headerlink" title="2. 设置权限"></a>2. 设置权限</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>

<h3 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure></div>

<h1 id="三-拉取dnmp环境配置"><a href="#三-拉取dnmp环境配置" class="headerlink" title="三. 拉取dnmp环境配置"></a>三. 拉取dnmp环境配置</h1><p>按需拉取 随便放在一个地方</p>
<div class="tabs" id="tab-代码克隆"><ul class="nav-tabs"><li class="tab active"><a class="#代码克隆-1">gitee</a></li><li class="tab"><a class="#代码克隆-2">github</a></li><li class="tab"><a class="#代码克隆-3">gitlab</a></li></ul><div class="tab-content"><div class="tab-pane active" id="代码克隆-1"><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/baoyuan0304/dnmp.git</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="代码克隆-2"><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b Linux https://github.com/BaoYuanY/dnmp.git</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="代码克隆-3"><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b Linux https://gitlab.yangbaoyuan.cn/BaoYuan/dnmp.git</span><br></pre></td></tr></table></figure></div></div></div></div>

<h1 id="四-配置"><a href="#四-配置" class="headerlink" title="四. 配置"></a>四. 配置</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /www              <span class="comment">#设置挂载目录</span></span><br><span class="line"><span class="built_in">cd</span> /www            </span><br><span class="line">git <span class="built_in">clone</span> ******        <span class="comment">#克隆dnmp代码 </span></span><br><span class="line">vim .<span class="built_in">env</span>                <span class="comment">#编辑 .env</span></span><br><span class="line"><span class="comment">#修改 SOURCE_DIR=/www  </span></span><br></pre></td></tr></table></figure></div>
<p>在dnmp目录下执行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d  <span class="comment">#第一次会先build 时间稍微长一点</span></span><br></pre></td></tr></table></figure></div>


<p><b>然后配置自己的nginx的*****.conf文件</b></p>
<p>DNMP项目特点：</p>
<ol>
<li><code>100%</code>开源</li>
<li><code>100%</code>遵循Docker标准</li>
<li>支持<strong>多版本PHP</strong>共存，可任意切换（PHP5.4、PHP5.6、PHP7.1、PHP7.2、PHP7.3、PHP8.0)</li>
<li>支持绑定<strong>任意多个域名</strong></li>
<li>支持<strong>HTTPS和HTTP&#x2F;2</strong></li>
<li><strong>PHP源代码、MySQL数据、配置文件、日志文件</strong>都可在Host中直接修改查看</li>
<li>内置<strong>完整PHP扩展安装</strong>命令</li>
<li>默认支持<code>pdo_mysql</code>、<code>mysqli</code>、<code>mbstring</code>、<code>gd</code>、<code>curl</code>、<code>opcache</code>等常用热门扩展，根据环境灵活配置</li>
<li>可一键选配常用服务：<ul>
<li>多PHP版本：PHP5.4、PHP5.6、PHP7.1-7.3、PHP8.0</li>
<li>Web服务：Nginx、Openresty</li>
<li>数据库：MySQL5、MySQL8、Redis、memcached、MongoDB、ElasticSearch</li>
<li>消息队列：RabbitMQ</li>
<li>辅助工具：Kibana、Logstash、phpMyAdmin、phpRedisAdmin、AdminMongo</li>
</ul>
</li>
<li>实际项目中应用，确保<code>100%</code>可用</li>
<li>所有镜像源于<a class="link"   href="https://hub.docker.com/" >Docker官方仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，安全可靠</li>
<li>一次配置，<strong>Windows、Linux、MacOs</strong>皆可用</li>
<li>支持快速安装扩展命令 <code>install-php-extensions apcu</code></li>
</ol>
<h1 id="五-dnmp详解"><a href="#五-dnmp详解" class="headerlink" title="五. dnmp详解"></a>五. dnmp详解</h1><h2 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">├── data                        数据库数据目录</span><br><span class="line">│   ├── esdata                  ElasticSearch 数据目录</span><br><span class="line">│   ├── mongo                   MongoDB 数据目录</span><br><span class="line">│   ├── mysql                   MySQL8 数据目录</span><br><span class="line">│   └── mysql5                  MySQL5 数据目录</span><br><span class="line">├── services                    服务构建文件和配置文件目录</span><br><span class="line">│   ├── elasticsearch           ElasticSearch 配置文件目录</span><br><span class="line">│   ├── mysql                   MySQL8 配置文件目录</span><br><span class="line">│   ├── mysql5                  MySQL5 配置文件目录</span><br><span class="line">│   ├── nginx                   Nginx 配置文件目录</span><br><span class="line">│   ├── php                     PHP5.6 - PHP7.3 配置目录</span><br><span class="line">│   ├── php54                   PHP5.4 配置目录</span><br><span class="line">│   └── redis                   Redis 配置目录</span><br><span class="line">├── logs                        日志目录</span><br><span class="line">├── docker-compose.sample.yml   Docker 服务配置示例文件</span><br><span class="line">├── env.smaple                  环境配置示例文件</span><br><span class="line">└── www                         PHP 代码目录</span><br></pre></td></tr></table></figure></div>

<h2 id="2-快速使用"><a href="#2-快速使用" class="headerlink" title="2.快速使用"></a>2.快速使用</h2><ol>
<li>本地安装<ul>
<li><code>git</code></li>
<li><code>Docker</code>(系统需为Linux，Windows 10 Build 15063+，或MacOS 10.12+，且必须要<code>64</code>位）</li>
<li><code>docker-compose 1.7.0+</code></li>
</ul>
</li>
<li><code>clone</code>项目： <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/yeszao/dnmp.git</span><br></pre></td></tr></table></figure></div></li>
<li>如果不是<code>root</code>用户，还需将当前用户加入<code>docker</code>用户组： <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a &#123;USER&#125; docker</span><br></pre></td></tr></table></figure></div></li>
<li>拷贝并命名配置文件（Windows系统请用<code>copy</code>命令），启动： <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd dnmp                                           # 进入项目目录</span><br><span class="line">cp env.sample .env                                # 复制环境变量文件</span><br><span class="line">cp docker-compose.sample.yml docker-compose.yml   # 复制 docker-compose 配置文件。默认启动3个服务：</span><br><span class="line">                                                   # Nginx、PHP7和MySQL8。要开启更多其他服务，如Redis、</span><br><span class="line">                                                   # PHP5.6、PHP5.4、MongoDB，ElasticSearch等，请删</span><br><span class="line">                                                   # 除服务块前的注释</span><br><span class="line">docker-compose up                                 # 启动</span><br></pre></td></tr></table></figure></div></li>
<li>在浏览器中访问：<code>http://localhost</code>或<code>https://localhost</code>(自签名HTTPS演示)就能看到效果，PHP代码在文件<code>./www/localhost/index.php</code>。</li>
</ol>
<h2 id="3-PHP和扩展"><a href="#3-PHP和扩展" class="headerlink" title="3.PHP和扩展"></a>3.PHP和扩展</h2><h3 id="3-1-切换Nginx使用的PHP版本"><a href="#3-1-切换Nginx使用的PHP版本" class="headerlink" title="3.1 切换Nginx使用的PHP版本"></a>3.1 切换Nginx使用的PHP版本</h3><p>首先，需要启动其他版本的PHP，比如PHP5.4，那就先在<code>docker-compose.yml</code>文件中删除PHP5.4前面的注释，再启动PHP5.4容器。</p>
<p>PHP5.4启动后，打开Nginx 配置，修改<code>fastcgi_pass</code>的主机地址，由<code>php</code>改为<code>php54</code>，如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcgi_pass   php:9000;</span><br></pre></td></tr></table></figure></div>
<p>为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcgi_pass   php54:9000;</span><br></pre></td></tr></table></figure></div>
<p>其中 <code>php</code> 和 <code>php54</code> 是<code>docker-compose.yml</code>文件中服务器的名称。</p>
<p>最后，<strong>重启 Nginx</strong> 生效。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx nginx -s reload</span><br></pre></td></tr></table></figure></div>
<p>这里两个<code>nginx</code>，第一个是容器名，第二个是容器中的<code>nginx</code>程序。</p>
<h3 id="3-2-安装PHP扩展"><a href="#3-2-安装PHP扩展" class="headerlink" title="3.2 安装PHP扩展"></a>3.2 安装PHP扩展</h3><p>PHP的很多功能都是通过扩展实现，而安装扩展是一个略费时间的过程，<br>所以，除PHP内置扩展外，在<code>env.sample</code>文件中我们仅默认安装少量扩展，<br>如果要安装更多扩展，请打开你的<code>.env</code>文件修改如下的PHP配置，<br>增加需要的PHP扩展：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">PHP_EXTENSIONS=pdo_mysql,opcache,redis       <span class="comment"># PHP 要安装的扩展列表，英文逗号隔开</span></span><br><span class="line">PHP54_EXTENSIONS=opcache,redis                 <span class="comment"># PHP 5.4要安装的扩展列表，英文逗号隔开</span></span><br></pre></td></tr></table></figure></div>
<p>然后重新build PHP镜像。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose build php</span><br></pre></td></tr></table></figure></div>
<p>可用的扩展请看同文件的<code>env.sample</code>注释块说明。</p>
<h3 id="3-3-快速安装php扩展"><a href="#3-3-快速安装php扩展" class="headerlink" title="3.3 快速安装php扩展"></a>3.3 快速安装php扩展</h3><p>1.进入容器:</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it php /bin/sh</span><br><span class="line"></span><br><span class="line">install-php-extensions apcu </span><br></pre></td></tr></table></figure></div>
<p>2.支持快速安装扩展列表</p>
<!-- START OF EXTENSIONS TABLE -->
<!-- ########################################################### -->
<!-- #                                                         # -->
<!-- #  DO NOT EDIT THIS TABLE: IT IS GENERATED AUTOMATICALLY  # -->
<!-- #                                                         # -->
<!-- #  EDIT THE data/supported-extensions FILE INSTEAD        # -->
<!-- #                                                         # -->
<!-- ########################################################### -->

<p>来自<a class="link"   href="https://github.com/mlocati/docker-php-extension-installer" >https://github.com/mlocati/docker-php-extension-installer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>参考示例文件</p>
<h3 id="3-4-Host中使用php命令行（php-cli）"><a href="#3-4-Host中使用php命令行（php-cli）" class="headerlink" title="3.4 Host中使用php命令行（php-cli）"></a>3.4 Host中使用php命令行（php-cli）</h3><ol>
<li>参考<a href="bash.alias.sample">bash.alias.sample</a>示例文件，将对应 php cli 函数拷贝到主机的 <code>~/.bashrc</code>文件。</li>
<li>让文件起效： <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div></li>
<li>然后就可以在主机中执行php命令了： <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">~ php -v</span><br><span class="line">PHP 7.2.13 (cli) (built: Dec 21 2018 02:22:47) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.2.13, Copyright (c) 1999-2018, by Zend Technologies</span><br><span class="line">    with Xdebug v2.6.1, Copyright (c) 2002-2018, by Derick Rethans</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="3-5-使用composer"><a href="#3-5-使用composer" class="headerlink" title="3.5 使用composer"></a>3.5 使用composer</h3><p><strong>方法1：主机中使用composer命令</strong></p>
<ol>
<li>确定composer缓存的路径。比如，我的dnmp下载在<code>~/dnmp</code>目录，那composer的缓存路径就是<code>~/dnmp/data/composer</code>。</li>
<li>参考<a href="bash.alias.sample">bash.alias.sample</a>示例文件，将对应 php composer 函数拷贝到主机的 <code>~/.bashrc</code>文件。<blockquote>
<p>这里需要注意的是，示例文件中的<code>~/dnmp/data/composer</code>目录需是第一步确定的目录。</p>
</blockquote>
</li>
<li>让文件起效： <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div></li>
<li>在主机的任何目录下就能用composer了： <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dnmp/www/</span><br><span class="line">composer create-project yeszao/fastphp project --no-dev</span><br></pre></td></tr></table></figure></div></li>
<li>（可选）第一次使用 composer 会在 <code>~/dnmp/data/composer</code> 目录下生成一个<strong>config.json</strong>文件，可以在这个文件中指定国内仓库，例如： <div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repositories&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;packagist&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;composer&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://packagist.laravel-china.org&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<strong>方法二：容器内使用composer命令</strong></li>
</ol>
<p>还有另外一种方式，就是进入容器，再执行<code>composer</code>命令，以PHP7容器为例：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it php /bin/sh</span><br><span class="line"><span class="built_in">cd</span> /www/localhost</span><br><span class="line">composer update</span><br></pre></td></tr></table></figure></div>

<h2 id="4-管理命令"><a href="#4-管理命令" class="headerlink" title="4.管理命令"></a>4.管理命令</h2><h3 id="4-1-服务器启动和构建命令"><a href="#4-1-服务器启动和构建命令" class="headerlink" title="4.1 服务器启动和构建命令"></a>4.1 服务器启动和构建命令</h3><p>如需管理服务，请在命令后面加上服务器名称，例如：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up                         <span class="comment"># 创建并且启动所有容器</span></span><br><span class="line">docker-compose up -d                      <span class="comment"># 创建并且后台运行方式启动所有容器</span></span><br><span class="line">docker-compose up nginx php mysql         <span class="comment"># 创建并且启动nginx、php、mysql的多个容器</span></span><br><span class="line">docker-compose up -d nginx php  mysql     <span class="comment"># 创建并且已后台运行的方式启动nginx、php、mysql容器</span></span><br><span class="line">docker-compose start php                  <span class="comment"># 启动服务</span></span><br><span class="line">docker-compose stop php                   <span class="comment"># 停止服务</span></span><br><span class="line">docker-compose restart php                <span class="comment"># 重启服务</span></span><br><span class="line">docker-compose build php                  <span class="comment"># 构建或者重新构建服务</span></span><br><span class="line">docker-compose <span class="built_in">rm</span> php                     <span class="comment"># 删除并且停止php容器</span></span><br><span class="line">docker-compose down                       <span class="comment"># 停止并删除容器，网络，图像和挂载卷</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-2-添加快捷命令"><a href="#4-2-添加快捷命令" class="headerlink" title="4.2 添加快捷命令"></a>4.2 添加快捷命令</h3><p>在开发的时候，我们可能经常使用<code>docker exec -it</code>进入到容器中，把常用的做成命令别名是个省事的方法。</p>
<p>首先，在主机中查看可用的容器：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps           <span class="comment"># 查看所有运行中的容器</span></span><br><span class="line">docker ps -a        <span class="comment"># 所有容器</span></span><br></pre></td></tr></table></figure></div>
<p>输出的<code>NAMES</code>那一列就是容器的名称，如果使用默认配置，那么名称就是<code>nginx</code>、<code>php</code>、<code>php56</code>、<code>mysql</code>等。</p>
<p>然后，打开<code>~/.bashrc</code>或者<code>~/.zshrc</code>文件，加上：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> dnginx=<span class="string">&#x27;docker exec -it nginx /bin/sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dphp=<span class="string">&#x27;docker exec -it php /bin/sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dphp56=<span class="string">&#x27;docker exec -it php56 /bin/sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dphp54=<span class="string">&#x27;docker exec -it php54 /bin/sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dmysql=<span class="string">&#x27;docker exec -it mysql /bin/bash&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dredis=<span class="string">&#x27;docker exec -it redis /bin/sh&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>下次进入容器就非常快捷了，如进入php容器：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">dphp</span><br></pre></td></tr></table></figure></div>

<h3 id="4-3-查看docker网络"><a href="#4-3-查看docker网络" class="headerlink" title="4.3 查看docker网络"></a>4.3 查看docker网络</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ifconfig docker0</span><br></pre></td></tr></table></figure></div>
<p>用于填写<code>extra_hosts</code>容器访问宿主机的<code>hosts</code>地址</p>
<h2 id="5-使用Log"><a href="#5-使用Log" class="headerlink" title="5.使用Log"></a>5.使用Log</h2><p>Log文件生成的位置依赖于conf下各log配置的值。</p>
<h3 id="5-1-Nginx日志"><a href="#5-1-Nginx日志" class="headerlink" title="5.1 Nginx日志"></a>5.1 Nginx日志</h3><p>Nginx日志是我们用得最多的日志，所以我们单独放在根目录<code>log</code>下。</p>
<p><code>log</code>会目录映射Nginx容器的<code>/var/log/nginx</code>目录，所以在Nginx配置文件中，需要输出log的位置，我们需要配置到<code>/var/log/nginx</code>目录，如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">error_log  /var/log/nginx/nginx.localhost.error.log  warn;</span><br></pre></td></tr></table></figure></div>


<h3 id="5-2-PHP-FPM日志"><a href="#5-2-PHP-FPM日志" class="headerlink" title="5.2 PHP-FPM日志"></a>5.2 PHP-FPM日志</h3><p>大部分情况下，PHP-FPM的日志都会输出到Nginx的日志中，所以不需要额外配置。</p>
<p>另外，建议直接在PHP中打开错误日志：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;error_reporting&#x27;</span>, <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="string">&#x27;on&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p>如果确实需要，可按一下步骤开启（在容器中）。</p>
<ol>
<li>进入容器，创建日志文件并修改权限： <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it php /bin/sh</span><br><span class="line"><span class="built_in">mkdir</span> /var/log/php</span><br><span class="line"><span class="built_in">cd</span> /var/log/php</span><br><span class="line"><span class="built_in">touch</span> php-fpm.error.log</span><br><span class="line"><span class="built_in">chmod</span> a+w php-fpm.error.log</span><br></pre></td></tr></table></figure></div></li>
<li>主机上打开并修改PHP-FPM的配置文件<code>conf/php-fpm.conf</code>，找到如下一行，删除注释，并改值为： <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_admin_value[error_log] = /var/log/php/php-fpm.error.log</span><br></pre></td></tr></table></figure></div></li>
<li>重启PHP-FPM容器。</li>
</ol>
<h3 id="5-3-MySQL日志"><a href="#5-3-MySQL日志" class="headerlink" title="5.3 MySQL日志"></a>5.3 MySQL日志</h3><p>因为MySQL容器中的MySQL使用的是<code>mysql</code>用户启动，它无法自行在<code>/var/log</code>下的增加日志文件。所以，我们把MySQL的日志放在与data一样的目录，即项目的<code>mysql</code>目录下，对应容器中的<code>/var/lib/mysql/</code>目录。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">slow-query-log-file     = /var/lib/mysql/mysql.slow.log</span><br><span class="line">log-error               = /var/lib/mysql/mysql.error.log</span><br></pre></td></tr></table></figure></div>
<p>以上是mysql.conf中的日志文件的配置。</p>
<h2 id="6-数据库管理"><a href="#6-数据库管理" class="headerlink" title="6.数据库管理"></a>6.数据库管理</h2><p>本项目默认在<code>docker-compose.yml</code>中不开启了用于MySQL在线管理的<em>phpMyAdmin</em>，以及用于redis在线管理的<em>phpRedisAdmin</em>，可以根据需要修改或删除。</p>
<h3 id="6-1-phpMyAdmin"><a href="#6-1-phpMyAdmin" class="headerlink" title="6.1 phpMyAdmin"></a>6.1 phpMyAdmin</h3><p>phpMyAdmin容器映射到主机的端口地址是：<code>8080</code>，所以主机上访问phpMyAdmin的地址是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure></div>

<p>MySQL连接信息：</p>
<ul>
<li>host：(本项目的MySQL容器网络)</li>
<li>port：<code>3306</code></li>
<li>username：（手动在phpmyadmin界面输入）</li>
<li>password：（手动在phpmyadmin界面输入）</li>
</ul>
<h3 id="6-2-phpRedisAdmin"><a href="#6-2-phpRedisAdmin" class="headerlink" title="6.2 phpRedisAdmin"></a>6.2 phpRedisAdmin</h3><p>phpRedisAdmin容器映射到主机的端口地址是：<code>8081</code>，所以主机上访问phpMyAdmin的地址是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8081</span><br></pre></td></tr></table></figure></div>

<p>Redis连接信息如下：</p>
<ul>
<li>host: (本项目的Redis容器网络)</li>
<li>port: <code>6379</code></li>
</ul>
<h2 id="7-在正式环境中安全使用"><a href="#7-在正式环境中安全使用" class="headerlink" title="7.在正式环境中安全使用"></a>7.在正式环境中安全使用</h2><p>要在正式环境中使用，请：</p>
<ol>
<li>在php.ini中关闭XDebug调试</li>
<li>增强MySQL数据库访问的安全策略</li>
<li>增强redis访问的安全策略</li>
</ol>
<h2 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8 常见问题"></a>8 常见问题</h2><h3 id="8-1-如何在PHP代码中使用curl？"><a href="#8-1-如何在PHP代码中使用curl？" class="headerlink" title="8.1 如何在PHP代码中使用curl？"></a>8.1 如何在PHP代码中使用curl？</h3><p>参考这个issue：<a class="link"   href="https://github.com/YBY-BaoYuan/dnmp/issues/91" >https://github.com/YBY-BaoYuan/dnmp/issues/91 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="8-2-Docker使用cron定时任务"><a href="#8-2-Docker使用cron定时任务" class="headerlink" title="8.2 Docker使用cron定时任务"></a>8.2 Docker使用cron定时任务</h3><p><a class="link"   href="https://www.awaimai.com/2615.html" >Docker使用cron定时任务 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="8-3-Docker容器时间"><a href="#8-3-Docker容器时间" class="headerlink" title="8.3 Docker容器时间"></a>8.3 Docker容器时间</h3><p>容器时间在.env文件中配置<code>TZ</code>变量，所有支持的时区请看<a class="link"   href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" >时区列表·维基百科 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>或者<a class="link"   href="https://www.php.net/manual/zh/timezones.php" >PHP所支持的时区列表·PHP官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="8-4-如何连接MySQL和Redis服务器"><a href="#8-4-如何连接MySQL和Redis服务器" class="headerlink" title="8.4 如何连接MySQL和Redis服务器"></a>8.4 如何连接MySQL和Redis服务器</h3><p>这要分两种情况，</p>
<p>第一种情况，在<strong>PHP代码中</strong>。</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接MySQL</span></span><br><span class="line">dbh = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=mysql;dbname=mysql&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接Redis</span></span><br><span class="line">redis = <span class="keyword">new</span> <span class="title class_">Redis</span>();</span><br><span class="line">redis-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;redis&#x27;</span>, <span class="number">6379</span>);</span><br></pre></td></tr></table></figure></div>
<p>因为容器与容器是<code>expose</code>端口联通的，而且在同一个<code>networks</code>下，所以连接的<code>host</code>参数直接用容器名称，<code>port</code>参数就是容器内部的端口。更多请参考<a class="link"   href="https://www.awaimai.com/2138.html" >《docker-compose ports和expose的区别》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p>第二种情况，<strong>在主机中</strong>通过<strong>命令行</strong>或者<strong>Navicat</strong>等工具连接。主机要连接mysql和redis的话，要求容器必须经过<code>ports</code>把端口映射到主机了。以 mysql 为例，<code>docker-compose.yml</code>文件中有这样的<code>ports</code>配置：<code>3306:3306</code>，就是主机的3306和容器的3306端口形成了映射，所以我们可以这样连接：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h127.0.0.1 -uroot -p123456 -P3306</span><br><span class="line">redis-cli -h127.0.0.1</span><br></pre></td></tr></table></figure></div>
<p>这里<code>host</code>参数不能用localhost是因为它默认是通过sock文件与mysql通信，而容器与主机文件系统已经隔离，所以需要通过TCP方式连接，所以需要指定IP。</p>
<h3 id="8-5-容器内的php如何连接宿主机MySQL"><a href="#8-5-容器内的php如何连接宿主机MySQL" class="headerlink" title="8.5 容器内的php如何连接宿主机MySQL"></a>8.5 容器内的php如何连接宿主机MySQL</h3><p>1.宿主机执行<code>ifconfig docker0</code>得到<code>inet</code>就是要连接的<code>ip</code>地址</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"> ifconfig docker0</span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></div>
<p>2.运行宿主机Mysql命令行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"> mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class="line"> mysql&gt;flush privileges;</span><br><span class="line">// 其中各字符的含义：</span><br><span class="line">// *.* 对任意数据库任意表有效</span><br><span class="line">// &quot;root&quot; &quot;123456&quot; 是数据库用户名和密码</span><br><span class="line">// &#x27;%&#x27; 允许访问数据库的IP地址，%意思是任意IP，也可以指定IP</span><br><span class="line">// flush privileges 刷新权限信息</span><br></pre></td></tr></table></figure></div>

<p>3.接着直接php容器使用<code>172.0.17.1:3306</code>连接即可</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>dnmp</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS有关SSH配置</title>
    <url>/centos-ssh-login/</url>
    <content><![CDATA[<h1 id="SSH的安装"><a href="#SSH的安装" class="headerlink" title="SSH的安装"></a>SSH的安装</h1><ol>
<li><p>首先，确保已在CentOS服务器上安装了openssh-server。通过运行以下命令检查是否已安装：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum list installed | grep openssh-server</span><br></pre></td></tr></table></figure></div>
<p>如果未安装，请使用以下命令安装：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install openssh-server</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动SSH服务并设置为开机自启动：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo systemctl enable sshd</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用防火墙允许SSH连接。防火墙默认情况下会阻止SSH连接，因此需要通过以下命令打开SSH端口：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=ssh</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
<p>或者，如果要打开某个特定端口，如22，使用以下命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-port=22/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编辑SSH配置文件，以添加或修改配置。使用文本编辑器编辑<code>/etc/ssh/sshd_config</code>文件：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></div>
<p>常见的配置选项包括：</p>
<ul>
<li>禁用ROOT登录：<code>PermitRootLogin no</code>。建议禁用Root登录，以增加安全性。</li>
<li>禁止密码登录：<code>PasswordAuthentication no</code>。</li>
<li>开始ssh登录：<code>PubkeyAuthentication yes</code>。</li>
<li>更改默认端口：将<code>Port</code>选项更改为所需端口（如<code>Port 2222</code>）。这可以帮助减少暴力攻击。</li>
<li>限制用户访问：例如，要仅允许用户alice和bob登录，需要添加<code>AllowUsers alice bob</code>。</li>
</ul>
<p>在编辑配置文件后，保存并关闭文件。</p>
</li>
<li><p>重启SSH服务，使更改生效：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置客户端。要从客户端登录到SSH服务器，需要在客户端生成SSH密钥（公钥和私钥）。在客户端运行以下命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></div>
<p>按照提示操作，您将会创建一个新的密钥对。然后将公钥添加到CentOS服务器的<code>~/.ssh/authorized_keys</code>文件中：</p>
<p>如果是非root用户要设置文件夹或者文件权限</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></div>
<p>登录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id user@your_server_ip</span><br></pre></td></tr></table></figure></div>
<p>（将’user’和’your_server_ip’替换为实际的值）</p>
</li>
<li><p>现在您已经配置好SSH登录了。要登录到远程服务器，请从客户端运行以下命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ssh user@your_server_ip</span><br></pre></td></tr></table></figure></div>
<p>（将’user’和’your_server_ip’替换为实际的值）</p>
</li>
</ol>
<p>就这样，您已经配置并从客户端访问了新的CentOS服务器。保持登录安全！</p>
<h1 id="ssh空闲超时时间检测"><a href="#ssh空闲超时时间检测" class="headerlink" title="ssh空闲超时时间检测"></a>ssh空闲超时时间检测</h1><ol>
<li>使用文本编辑器（例如vi,nano,vim）编辑配置文件<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></div></li>
<li>找到 <code>ClientAliveInterval</code> 设置为600到900之间</li>
<li>重启 SSH 服务以使更改生效<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h1 id="使用加密的远程管理ssh"><a href="#使用加密的远程管理ssh" class="headerlink" title="使用加密的远程管理ssh"></a>使用加密的远程管理ssh</h1><p><b>未使用安全套接字（如SSH）加密远程管理服务器可能会导致以下危害：</b></p>
<ul>
<li>数据泄露：未加密的通信容易被截获和窃听。黑客可以捕获传输中的敏感数据，如用户名、密码、配置文件和其他重要信息。</li>
<li>中间人攻击：未加密的连接容易受到中间人攻击。攻击者可能会拦截通信，修改数据，然后将其传输到接收者，而双方可能都不知道通信已被篡改。</li>
<li>暴力破解攻击：当传输未加密的用户名和密码时，攻击者可以尝试破解这些凭据以访问服务器。如果它们使用了弱密码，攻击者可能很容易就能破解密码。</li>
<li>会话劫持：在未加密的连接中，攻击者可以劫持用户会话，然后使用已登录的凭据对服务器进行操作。</li>
<li>恶意软件和后门程序：攻击者可能会通过未加密的连接传播恶意软件或植入后门，以便在以后对服务器进行攻击。这可能会导致数据损坏、丢失或被盗。</li>
<li>泄露IP地址：未加密的连接也会泄露使用者的IP地址，这可能导致IP被跟踪，进一步增加黑客攻击发现的可能性。</li>
</ul>
<ol>
<li>在sshd_config中添加或设置 <code>Protocol 2</code> <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></div></li>
<li>重启 SSH 服务以使更改生效<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h1 id="设置ssh登录白名单"><a href="#设置ssh登录白名单" class="headerlink" title="设置ssh登录白名单"></a>设置ssh登录白名单</h1><ol>
<li>在<code>/etc/hosts.deny</code>添加 <code>ALL:ALL</code></li>
<li>在<code>/etc/hosts.allow</code>添加 <code>sshd:192.168.1.1</code> <blockquote>
<p>192.168.1.1只是一个示例  需要根据自己情况去配置</p>
</blockquote>
</li>
</ol>
<h1 id="配置命令行超时退出"><a href="#配置命令行超时退出" class="headerlink" title="配置命令行超时退出"></a>配置命令行超时退出</h1><p><b>未配置命令行超时退出（也称为闲置超时）可能会带来以下隐患：</b></p>
<ul>
<li>未授权访问：如果有人在用户离开计算机时尝试访问已登录的SSH会话，他们可能会有权限执行高级任务或对系统进行更改。这特别适用于具有sudo权限的用户，因为他们能够执行危险的系统操作。</li>
<li>资源占用：对于运行多个SSH会话的用户，很容易忘记关闭其中的某个。这可能导致系统资源被长期占用，从而降低服务器的整体性能。</li>
<li>难以进行故障排查：如果没有超时设置，系统管理员在分析系统日志时可能发现很多未结束的SSH会话。这会使他们难以确定哪个SSH会话是可疑的或导致问题的，从而增加排查问题的难度。</li>
</ul>
<ol>
<li>在<code>/etc/profile</code>中添加<code>tmout=300</code><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure></div></li>
<li>使更改生效<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>大话设计模式</title>
    <url>/design-patterns-in-plain-language/</url>
    <content><![CDATA[<h1 id="1-【简单工厂模式】代码无错就是优"><a href="#1-【简单工厂模式】代码无错就是优" class="headerlink" title="1.【简单工厂模式】代码无错就是优"></a>1.【简单工厂模式】代码无错就是优</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Operation </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$a</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$b</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setA</span>(<span class="params"><span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setB</span>(<span class="params"><span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a + <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mul</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationMul</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a * <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sub</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationSub</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a - <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Div</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationDiv</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a / <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Operation Factory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createOperation</span>(<span class="params"><span class="variable">$operation</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$operation</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                <span class="variable">$oper</span> = <span class="keyword">new</span> <span class="title class_">OperationAdd</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="variable">$oper</span> = <span class="keyword">new</span> <span class="title class_">OperationSub</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                <span class="variable">$oper</span> = <span class="keyword">new</span> <span class="title class_">OperationDiv</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                <span class="variable">$oper</span> = <span class="keyword">new</span> <span class="title class_">OperationMul</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$oper</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="variable">$operation</span> = <span class="title class_">OperationFactory</span>::<span class="title function_ invoke__">createOperation</span>(<span class="string">&#x27;+&#x27;</span>);</span><br><span class="line"><span class="variable">$operation</span>-&gt;<span class="title function_ invoke__">setA</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$operation</span>-&gt;<span class="title function_ invoke__">setB</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$operation</span>-&gt;<span class="title function_ invoke__">getResult</span>() . PHP_EOL;</span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>学会通过分封装，继承，多态把程序的藕合度降低</p>
<p>复用，不是复制！</p>
<p>高内聚，低耦合</p>
</blockquote>
<h1 id="2-【策略模式】商场促销"><a href="#2-【策略模式】商场促销" class="headerlink" title="2.【策略模式】商场促销"></a>2.【策略模式】商场促销</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* abstract class</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 算法方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">AlgorithmInterface</span>(<span class="params"></span>)</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 算法a</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">AlgorithmInterface</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;算法a实现\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 算法b</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">extends</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">AlgorithmInterface</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;算法b实现\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 算法c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyC</span> <span class="keyword">extends</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">AlgorithmInterface</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;算法c实现\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 上下文context</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$strategy</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$strategy</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;strategy = <span class="variable">$strategy</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">contextInterface</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;strategy-&gt;<span class="title function_ invoke__">AlgorithmInterface</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$context</span> = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ConcreteStrategyA</span>());</span><br><span class="line"><span class="variable">$context</span>-&gt;<span class="title function_ invoke__">contextInterface</span>();</span><br><span class="line"><span class="variable">$context</span> = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ConcreteStrategyB</span>());</span><br><span class="line"><span class="variable">$context</span>-&gt;<span class="title function_ invoke__">contextInterface</span>();</span><br><span class="line"><span class="variable">$context</span> = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ConcreteStrategyC</span>());</span><br><span class="line"><span class="variable">$context</span>-&gt;<span class="title function_ invoke__">contextInterface</span>();</span><br></pre></td></tr></table></figure></div>

<p>策略模式和简单工厂模式相结合</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 只需要修改上方的Context类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$strategy</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$operation</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$operation</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;strategy = <span class="keyword">new</span> <span class="title function_ invoke__">ConcreteStrategyA</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">               <span class="variable language_">$this</span>-&gt;strategy = <span class="keyword">new</span> <span class="title function_ invoke__">ConcreteStrategyB</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;strategy = <span class="keyword">new</span> <span class="title function_ invoke__">ConcreteStrategyC</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">contextInterface</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;strategy-&gt;<span class="title function_ invoke__">AlgorithmInterface</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="variable">$context</span> = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable">$context</span>-&gt;<span class="title function_ invoke__">contextInterface</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>面向对象的编程，并不是类越多越好，类的划分为了封装，但分类的基础是抽象，具有相同属性和功能的对象集合才是类。</p>
<p>策略模式是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</p>
<p>策略模式的Strategy类层次为Context定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中公共功能。</p>
<p>策略模式简化了单元测试，因为每个算法都有自己的类，可以通自己接口单独测试。</p>
<p>当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个Strategy类中，可以在使用这些行为的类中消除条件语句。</p>
<p>策略模式就是用来封装算法的，但在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。</p>
<p>在基本的策略模式中，选择所用具体实现的职责由客户端对象承担，并转给策略模式的Context对象。</p>
</blockquote>
<h1 id="3-【单一职责原则】拍摄UFO"><a href="#3-【单一职责原则】拍摄UFO" class="headerlink" title="3.【单一职责原则】拍摄UFO"></a>3.【单一职责原则】拍摄UFO</h1><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>单一职责原则， 就一个类而言,应该仅有一个引起 它变化的原因。</p>
<p>如果一个类承担的职责过多，就等于把职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破环。</p>
<p>软件设计真正要做的许多内容，就是发现职责并把这些职责相互分离。</p>
<p>如果你能够想到多于一个的动机改变一个类，那么这个类就具有多于一个类的职责。</p>
</blockquote>
<h1 id="4-【装饰模式】穿什么有这么重要吗"><a href="#4-【装饰模式】穿什么有这么重要吗" class="headerlink" title="4.【装饰模式】穿什么有这么重要吗"></a>4.【装饰模式】穿什么有这么重要吗</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Operation</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ConcreteComponent</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Operation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;具体对象的操作.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$component</span>;</span><br><span class="line">    <span class="comment">// 设置component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">SetComponent</span>(<span class="params"><span class="variable">$component</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;component = <span class="variable">$component</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重写Operation(),实际执行的是component的Operation方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Operation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;component != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;component-&gt;<span class="title function_ invoke__">Operation</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ConcreteDecoratorA</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 本类的独有功能，以区别于ConcreteDecoratorB</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$addedState</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Operation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="comment">// 首先运行原Component的Operation(),再执行本类的功能，</span></span><br><span class="line">        <span class="comment">// 如addedState,相当于对原Component进行了装饰</span></span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">Operation</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;addedState = <span class="string">&quot;ConcreteDecoratorA Status&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;addedState.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;具体装饰对象A的操作.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ConcreteDecoratorB</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Operation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="comment">// 首先运行原Component的Operation(),再执行本类的功能，</span></span><br><span class="line">        <span class="comment">// 如addedBehavior,相当于对原Component进行了装饰</span></span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">Operation</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">addedBehavior</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;具体装饰对象B的操作.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 本类的独有功能，以区别于ConcreteDecoratorA</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">addedBehavior</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteDecoratorB Status.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="comment">// 装饰的方法是：首先用ConcreteComponent实例化对象c,</span></span><br><span class="line"><span class="comment">// 然后用ConcreteDecoratorA的实例对象$di来包装$c,</span></span><br><span class="line"><span class="comment">// 然后再用ConcreteDecoratorB的实例$d2包装$d1,</span></span><br><span class="line"><span class="comment">// 最终执行$d2的Operation(); </span></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">ConcreteComponent</span>();</span><br><span class="line"><span class="variable">$d1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ConcreteDecoratorA</span>();</span><br><span class="line"><span class="variable">$d2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ConcreteDecoratorB</span>();</span><br><span class="line"><span class="variable">$d1</span>-&gt;<span class="title function_ invoke__">SetComponent</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$d2</span>-&gt;<span class="title function_ invoke__">SetComponent</span>(<span class="variable">$d1</span>);</span><br><span class="line"><span class="variable">$d2</span>-&gt;<span class="title function_ invoke__">Operation</span>();</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>当只有一个ConcreteComponent类而没有抽象的Component类 ，那么Decorator类可以是ConcreteComponent的一个子类。同样的道理，如果只有一个ConcreteDecorator类 ，那么就没有必要建立一个单独的Decorator类，而可以把Decorator类和ConcreteComponent类的责任合并成一个类。</p>
</blockquote>
<p>书中用打扮的代码阐释了这样情况下的写法：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// 人</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;打扮&quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 服饰类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Finery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$person</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decorate</span>(<span class="params"><span class="variable">$person</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;person = <span class="variable">$person</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;person != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;person-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体服饰类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TShirts</span> <span class="keyword">extends</span> <span class="title">Finery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;大T恤\n&quot;</span>;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigTrouser</span> <span class="keyword">extends</span> <span class="title">Finery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;跨裤\n&quot;</span>;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sneakers</span> <span class="keyword">extends</span> <span class="title">Finery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;破球鞋\n&quot;</span>;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Suit</span> <span class="keyword">extends</span> <span class="title">Finery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;西装\n&quot;</span>;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tie</span> <span class="keyword">extends</span> <span class="title">Finery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;领带\n&quot;</span>;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeatherShoes</span> <span class="keyword">extends</span> <span class="title">Finery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;跨裤\n&quot;</span>;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;alex&quot;</span>);</span><br><span class="line"><span class="variable">$sneakers</span> = <span class="keyword">new</span> <span class="title class_">Sneakers</span>();</span><br><span class="line"><span class="variable">$bigTrouser</span> = <span class="keyword">new</span> <span class="title class_">BigTrouser</span>();</span><br><span class="line"><span class="variable">$tShirts</span> = <span class="keyword">new</span> <span class="title class_">TShirts</span>();</span><br><span class="line"><span class="variable">$sneakers</span>-&gt;<span class="title function_ invoke__">decorate</span>(<span class="variable">$person</span>);</span><br><span class="line"><span class="variable">$bigTrouser</span>-&gt;<span class="title function_ invoke__">decorate</span>(<span class="variable">$sneakers</span>);</span><br><span class="line"><span class="variable">$tShirts</span>-&gt;<span class="title function_ invoke__">decorate</span>(<span class="variable">$bigTrouser</span>);</span><br><span class="line"><span class="variable">$tShirts</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>装饰模式，动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</p>
<p>装饰模式是为已有功能动态的添加更多功能的一种方式。</p>
<p>当系统需要新功能的时候，是向旧的类中添加新的代码。这些新的代码通常装饰了原有类的核心职责或主要行为。</p>
<p>在主类中加入新的字段，新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为满足一些只在某种特定情况下才会执行的特殊行为的需要。装饰模式却提供了一个非常好的解决方案，它把每个要装饰的功能放在单独的类中，并让这个类包装它要装饰的对象，对此，当需要执行特殊行为时，客户代码就可以在运行时根据需要选择地，按顺序地使用装饰功能包装对象了。</p>
<p>装饰模式的优点就是把类中的装饰功能从类中搬移去除，这样可以简化原有的类。</p>
<p>有效地把类的核心职责和装饰功能区分开了，而且可以去除相关类中的重复的装饰逻辑。</p>
</blockquote>
<h1 id="5-【代理模式】为别人做嫁衣"><a href="#5-【代理模式】为别人做嫁衣" class="headerlink" title="5.【代理模式】为别人做嫁衣"></a>5.【代理模式】为别人做嫁衣</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolGirl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GiveGift</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">GiveDolls</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">GiveFlowers</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">GiveChocolate</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理实现送礼物接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">GiveGift</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$pursuit</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">SchoolGirl <span class="variable">$girl</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pursuit = <span class="keyword">new</span> <span class="title class_">Pursuit</span>(<span class="variable">$girl</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">GiveDolls</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pursuit-&gt;<span class="title function_ invoke__">GiveDolls</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">GiveFlowers</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pursuit-&gt;<span class="title function_ invoke__">GiveFlowers</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">GiveChocolate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pursuit-&gt;<span class="title function_ invoke__">GiveChocolate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 追求者类实现送礼物接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pursuit</span> <span class="keyword">implements</span> <span class="title">GiveGift</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$girl</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">SchoolGirl <span class="variable">$girl</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;girl = <span class="variable">$girl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">GiveDolls</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;girl-&gt;<span class="title function_ invoke__">getName</span>().<span class="string">&quot; 送你娃娃\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">GiveFlowers</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;girl-&gt;<span class="title function_ invoke__">getName</span>().<span class="string">&quot; 送你花\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">GiveChocolate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;girl-&gt;<span class="title function_ invoke__">getName</span>().<span class="string">&quot; 送你巧克力\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="variable">$girl</span> = <span class="keyword">new</span> <span class="title class_">SchoolGirl</span>(<span class="string">&#x27;李梅&#x27;</span>);</span><br><span class="line"><span class="variable">$proxy</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="variable">$girl</span>);</span><br><span class="line"><span class="variable">$proxy</span>-&gt;<span class="title function_ invoke__">GiveDolls</span>();</span><br><span class="line"><span class="variable">$proxy</span>-&gt;<span class="title function_ invoke__">GiveChocolate</span>();</span><br><span class="line"><span class="variable">$proxy</span>-&gt;<span class="title function_ invoke__">GiveFlowers</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>代理模式，为其他对象提供一种代理以控制对这个对象的访问</p>
</blockquote>
<h1 id="6-【工厂方法模式】雷锋依然在人间"><a href="#6-【工厂方法模式】雷锋依然在人间" class="headerlink" title="6.【工厂方法模式】雷锋依然在人间"></a>6.【工厂方法模式】雷锋依然在人间</h1><p>根据第一章，简单工厂模式（加减乘除）是这样的：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createOperation</span>(<span class="params"><span class="variable">$operation</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$operation</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                <span class="variable">$oper</span> = <span class="keyword">new</span> <span class="title class_">OperationAdd</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="variable">$oper</span> = <span class="keyword">new</span> <span class="title class_">OperationSub</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                <span class="variable">$oper</span> = <span class="keyword">new</span> <span class="title class_">OperationDiv</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                <span class="variable">$oper</span> = <span class="keyword">new</span> <span class="title class_">OperationMul</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$oper</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="variable">$operation</span> = <span class="title class_">OperationFactory</span>::<span class="title function_ invoke__">createOperation</span>(<span class="string">&#x27;+&#x27;</span>);</span><br><span class="line"><span class="variable">$operation</span>-&gt;<span class="title function_ invoke__">setA</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$operation</span>-&gt;<span class="title function_ invoke__">setA</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$operation</span>-&gt;<span class="title function_ invoke__">getResult</span>().<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure></div>
<p>换成工厂方法模式</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateOperation</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateOperation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OperationAdd</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateOperation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OperationSub</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateOperation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OperationMul</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateOperation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OperationDiv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="variable">$operationFactory</span> = <span class="keyword">new</span> <span class="title class_">AddFactory</span>();</span><br><span class="line"><span class="variable">$operation</span> = <span class="variable">$operationFactory</span>-&gt;<span class="title function_ invoke__">CreateOperation</span>();</span><br><span class="line"><span class="variable">$operation</span>-&gt;<span class="title function_ invoke__">setA</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable">$operation</span>-&gt;<span class="title function_ invoke__">setB</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$operation</span>-&gt;<span class="title function_ invoke__">getResult</span>().<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>工厂方法模式，定义一个创建对象的接口，让子类确定实例化哪一个类。工厂方法使一个类的实例化延迟到7其子类。</p>
<p>简单工厂模式的最大优点在于工厂类中包含了必要的逻辑判断，根据用户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。</p>
<p>工厂方法模式实现时，客户端需要决定实例化哪一个工厂来实现运算类，选择判断的问题还是存在的，也就是说，工厂方法把简单工厂的内部逻辑判断移到了客户端代码来进行。你 想要加功能，本来是改工厂类的，而现在是修改客户端。</p>
</blockquote>
<h1 id="7-【原型模式】简历复制"><a href="#7-【原型模式】简历复制" class="headerlink" title="7.【原型模式】简历复制"></a>7.【原型模式】简历复制</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$company</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;company = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;company;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resume</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$timeArea</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$company</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;company = <span class="keyword">new</span> <span class="title class_">Company</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPersonalInfo</span>(<span class="params"><span class="variable">$sex</span>, <span class="variable">$age</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWorkExperience</span>(<span class="params"><span class="variable">$timeArea</span>, <span class="variable">$company</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;timeArea = <span class="variable">$timeArea</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;company-&gt;<span class="title function_ invoke__">setName</span>(<span class="variable">$company</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name.<span class="string">&quot; &quot;</span>.<span class="variable language_">$this</span>-&gt;sex.<span class="string">&quot; &quot;</span>.<span class="variable language_">$this</span>-&gt;age.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;timeArea.<span class="string">&quot; &quot;</span>.<span class="variable language_">$this</span>-&gt;company-&gt;<span class="title function_ invoke__">getName</span>().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对引用执行深复制</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;company = <span class="keyword">clone</span> <span class="variable language_">$this</span>-&gt;company;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="variable">$resume</span> = <span class="keyword">new</span> <span class="title class_">Resume</span>(<span class="string">&quot;大鸟&quot;</span>);</span><br><span class="line"><span class="variable">$resume</span>-&gt;<span class="title function_ invoke__">setPersonalInfo</span>(<span class="string">&quot;男&quot;</span>, <span class="number">29</span>);</span><br><span class="line"><span class="variable">$resume</span>-&gt;<span class="title function_ invoke__">setWorkExperience</span>(<span class="string">&quot;1998-2000&quot;</span>,<span class="string">&quot;xxx 公司&quot;</span>);</span><br><span class="line"><span class="variable">$resume2</span> = <span class="keyword">clone</span> <span class="variable">$resume</span>;</span><br><span class="line"><span class="variable">$resume2</span>-&gt;<span class="title function_ invoke__">setPersonalInfo</span>(<span class="string">&quot;男&quot;</span>, <span class="number">40</span>);</span><br><span class="line"><span class="variable">$resume2</span>-&gt;<span class="title function_ invoke__">setWorkExperience</span>(<span class="string">&quot;1998-2010&quot;</span>,<span class="string">&quot;xx 公司&quot;</span>);</span><br><span class="line"><span class="variable">$resume</span>-&gt;<span class="title function_ invoke__">display</span>();</span><br><span class="line"><span class="variable">$resume2</span>-&gt;<span class="title function_ invoke__">display</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>原型模式，用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<p>原型模式其实就是从一个对象再创建另外一个可定制的对象，而且不需要知道任何创建的细节。</p>
<p>一般在初始化的信息不发生变化的情况下，克隆是最好的办法。既隐藏了对象创建的细节，又对性能是大大的提高。</p>
</blockquote>
<h1 id="8-【模版方法模式】考题抄错也白搭"><a href="#8-【模版方法模式】考题抄错也白搭" class="headerlink" title="8.【模版方法模式】考题抄错也白搭"></a>8.【模版方法模式】考题抄错也白搭</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// 对甲乙两名同学所抄试卷，尽量将相同的部分提到父类</span></span><br><span class="line"><span class="comment">// 金庸小说考题试卷</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPaper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TestQuestion1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;杨过说过，后来给了郭靖，炼成倚天剑、屠龙刀的玄铁可能是［］a.球磨铸铁 b.马口铁 c.高速合金钢 d.碳素纤维 \n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;答案 &quot;</span>.<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">answer1</span>().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TestQuestion2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;杨过、程英、陆无双铲除了情花，造成［］a.使这种植物不在害人 b.使一种珍惜物种灭绝 c.破坏了那个生态圈的生态平衡 d.造成该地区沙漠化 \n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;答案 &quot;</span>.<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">answer2</span>().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TestQuestion3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;蓝凤凰致使华山师徒、桃谷六仙呕吐不止，如果你是大夫，会给他们开什么药［］a.阿司匹林 b.牛黄解毒片 c.氟哌酸 d.让他们喝大量的生牛奶 e.以上全不对 \n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;答案 &quot;</span>.<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">answer3</span>().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 学生甲抄的试卷</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPaperA</span> <span class="keyword">extends</span> <span class="title">TestPaper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 学生乙抄的试卷</span></span><br><span class="line"><span class="comment">// 学生甲抄的试卷</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPaperB</span> <span class="keyword">extends</span> <span class="title">TestPaper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;学生甲抄的试卷: \n&quot;</span>;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TestPaperA</span>();</span><br><span class="line"><span class="variable">$student</span>-&gt;<span class="title function_ invoke__">TestQuestion1</span>();</span><br><span class="line"><span class="variable">$student</span>-&gt;<span class="title function_ invoke__">TestQuestion2</span>();</span><br><span class="line"><span class="variable">$student</span>-&gt;<span class="title function_ invoke__">TestQuestion3</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;学生乙抄的试卷: \n&quot;</span>;</span><br><span class="line"><span class="variable">$student2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TestPaperB</span>();</span><br><span class="line"><span class="variable">$student2</span>-&gt;<span class="title function_ invoke__">TestQuestion1</span>();</span><br><span class="line"><span class="variable">$student2</span>-&gt;<span class="title function_ invoke__">TestQuestion2</span>();</span><br><span class="line"><span class="variable">$student2</span>-&gt;<span class="title function_ invoke__">TestQuestion3</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>模版方法模式，定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模版方法使得子类可以不改变算法的节结构即可重定义该算法的某些特定步骤。</p>
<p>既然用了继承，并且肯定这个继承有意义，就应该要成为子类的模版，所有重复的代码都应该要上升到父类去，而不是让每个子类去重复。</p>
<p>当我们要完成在某一细节层次一致的一个过程或一系列步骤，但其中个别步骤在更详细的层次上的实现可能不同时，我们通常考虑用模版方法模式来处理。</p>
<p>模版方法模式是通过把不变行为搬移到超类，去除子类中的重复代码来体现它的优势。提供了一个很好的代码复用平台。</p>
<p>当不变的和可变的行为在方法的子类实现中混合在一起的时候，不变的行为就会在子类中重复出现。通过模版方法把这些行为搬移到单一的地方，这样就帮助子类摆脱重复的不变行为的纠缠。</p>
</blockquote>
<h1 id="9-【迪米特法则】无熟人难办事"><a href="#9-【迪米特法则】无熟人难办事" class="headerlink" title="9.【迪米特法则】无熟人难办事"></a>9.【迪米特法则】无熟人难办事</h1><h2 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>迪米特法则，如果两个类不彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</p>
<p>在类的结构设计上，每一个类都应当 尽量降低成员的访问权限</p>
<p>类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。</p>
</blockquote>
<h1 id="10-【外观模式】牛市股票还会亏钱"><a href="#10-【外观模式】牛市股票还会亏钱" class="headerlink" title="10.【外观模式】牛市股票还会亏钱"></a>10.【外观模式】牛市股票还会亏钱</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//子系统1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemOne</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">methodOne</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;子系统方法1\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子系统2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemTwo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">methodTwo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;子系统方法2\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子系统3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemThree</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">methodThree</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;子系统方法3\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子系统4</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemFourth</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">methodFourth</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;子系统方法4\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外观方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$systemOne</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$systemTwo</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$systemThree</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$systemFour</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;systemOne = <span class="keyword">new</span> <span class="title class_">SubSystemOne</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;systemTwo = <span class="keyword">new</span> <span class="title class_">SubSystemTwo</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;systemThree = <span class="keyword">new</span> <span class="title class_">SubSystemThree</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;systemFour = <span class="keyword">new</span> <span class="title class_">SubSystemFourth</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">methodA</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;方法A() ---\n&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;systemOne-&gt;<span class="title function_ invoke__">methodOne</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;systemThree-&gt;<span class="title function_ invoke__">methodThree</span>();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">methodB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;方法B() ---\n&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;systemTwo-&gt;<span class="title function_ invoke__">methodTwo</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;systemFour-&gt;<span class="title function_ invoke__">methodFourth</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="variable">$facade</span> = <span class="keyword">new</span> <span class="title class_">Facade</span>();</span><br><span class="line"><span class="variable">$facade</span>-&gt;<span class="title function_ invoke__">methodA</span>();</span><br><span class="line"><span class="variable">$facade</span>-&gt;<span class="title function_ invoke__">methodB</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>外观模式，为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更容易使用。</p>
<p>首先，在设计初期阶段，应该要有意识的将不同的两个层分离，层与层之间建立外观Facade；其次，在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观Facade可以提供一个简单的接口，减少它们之间的依赖；另外在维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展了，为新系统开发一个外观Facade类，来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让系统与Facade对象交互，Facade与遗留代码交互所有复杂的工作</p>
</blockquote>
<h1 id="11-【建造者模式】好菜没回味不同"><a href="#11-【建造者模式】好菜没回味不同" class="headerlink" title="11.【建造者模式】好菜没回味不同"></a>11.【建造者模式】好菜没回味不同</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//画小人</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonBuilder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildHead</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildBody</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildArmLeft</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildArmRight</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildLegLeft</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildLegRight</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonThinBuilder</span> <span class="keyword">extends</span> <span class="title">PersonBuilder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildHead</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;小头\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildBody</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;小身子\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildArmRight</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;右臂\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildArmLeft</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;左臂\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildLegLeft</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;左腿\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildLegRight</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;右腿\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonFatBuilder</span> <span class="keyword">extends</span> <span class="title">PersonBuilder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildHead</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;大头\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildBody</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;大身子\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildArmRight</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;右臂\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildArmLeft</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;左臂\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildLegLeft</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;左腿\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">BuildLegRight</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;右腿\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDirector</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$personBuilder</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$personBuilder</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;personBuilder = <span class="variable">$personBuilder</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;personBuilder-&gt;<span class="title function_ invoke__">BuildHead</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;personBuilder-&gt;<span class="title function_ invoke__">BuildBody</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;personBuilder-&gt;<span class="title function_ invoke__">BuildArmRight</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;personBuilder-&gt;<span class="title function_ invoke__">BuildArmLeft</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;personBuilder-&gt;<span class="title function_ invoke__">BuildLegLeft</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;personBuilder-&gt;<span class="title function_ invoke__">BuildLegRight</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;苗条的:\n&quot;</span>;</span><br><span class="line"><span class="variable">$thinDirector</span> = <span class="keyword">new</span> <span class="title class_">PersonDirector</span>(<span class="keyword">new</span> <span class="title class_">PersonThinBuilder</span>());</span><br><span class="line"><span class="variable">$thinDirector</span>-&gt;<span class="title function_ invoke__">CreatePerson</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n胖的:\n&quot;</span>;</span><br><span class="line"><span class="variable">$fatDirector</span> = <span class="keyword">new</span> <span class="title class_">PersonDirector</span>(<span class="keyword">new</span> <span class="title class_">PersonFatBuilder</span>());</span><br><span class="line"><span class="variable">$fatDirector</span>-&gt;<span class="title function_ invoke__">CreatePerson</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>建造者模式，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<p>如果我们用了建造者模式，那么用户只需要指定需要建造的类型就可以得到他们，而具体建造的过程和细节就不需要知道了。</p>
<p>主要用于创建一些复杂的对象，这些对象内部构建间的建造顺序通常是稳定的，但对象内部的构建通畅面临着复杂的变化。</p>
<p>建造者模式是在当创建复杂对象的算法应该独立于改对象的组成部分以及它们的装配方式时适用的模式。</p>
</blockquote>
<h1 id="12-【观察者模式】老板回来，我不知道"><a href="#12-【观察者模式】老板回来，我不知道" class="headerlink" title="12.【观察者模式】老板回来，我不知道"></a>12.【观察者模式】老板回来，我不知道</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$observers</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span>(<span class="params">Observer <span class="variable">$observer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;observers, <span class="variable">$observer</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detatch</span>(<span class="params"><span class="variable">$observer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;observers <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$observer</span> === <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;observers[<span class="variable">$key</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;observers <span class="keyword">as</span> <span class="variable">$observer</span>) &#123;</span><br><span class="line">            <span class="variable">$observer</span>-&gt;<span class="title function_ invoke__">update</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$subjectState</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params"><span class="variable">$state</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;subjectState = <span class="variable">$state</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;subjectState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$subject</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">ConcreteSubject <span class="variable">$subject</span>, <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;subject = <span class="variable">$subject</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;观察者 &quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;的新状态是:&quot;</span>.<span class="variable language_">$this</span>-&gt;subject-&gt;<span class="title function_ invoke__">getState</span>().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;<span class="title function_ invoke__">attach</span>(<span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(<span class="variable">$s</span>, <span class="string">&quot;x&quot;</span>));</span><br><span class="line"><span class="variable">$s</span>-&gt;<span class="title function_ invoke__">attach</span>(<span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(<span class="variable">$s</span>, <span class="string">&quot;y&quot;</span>));</span><br><span class="line"><span class="variable">$z</span> = <span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(<span class="variable">$s</span>, <span class="string">&quot;z&quot;</span>);</span><br><span class="line"><span class="variable">$s</span>-&gt;<span class="title function_ invoke__">attach</span>(<span class="variable">$z</span>);</span><br><span class="line"><span class="variable">$s</span>-&gt;<span class="title function_ invoke__">detatch</span>(<span class="variable">$z</span>);</span><br><span class="line"><span class="variable">$s</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="string">&#x27;ABC&#x27;</span>);</span><br><span class="line"><span class="variable">$s</span>-&gt;<span class="title function_ invoke__">notify</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-11"><a href="#总结-11" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>观察者模式，定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>
<p>将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是要维护相关对象间的一致性。我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便。</p>
<p>观察者模式所做的工作其实就是在接触耦合。让耦合的双方都依赖于抽象，而不是依赖于具体。从而使得各自的变化都不会影响另一边的变化。</p>
</blockquote>
<h1 id="13-【抽象工厂模式】就不能不换DB吗？"><a href="#13-【抽象工厂模式】就不能不换DB吗？" class="headerlink" title="13.【抽象工厂模式】就不能不换DB吗？"></a>13.【抽象工厂模式】就不能不换DB吗？</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/////////version1</span></span><br><span class="line"><span class="comment">//数据库访问</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setId</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setId</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUser</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">User <span class="variable">$user</span></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"><span class="variable">$id</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlserverUser</span> <span class="keyword">implements</span> <span class="title">IUser</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">User <span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;往SQL Server中的User表添加一条记录\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;根据id得到SQL Server中User表一条记录\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AcessUser</span> <span class="keyword">implements</span> <span class="title">IUser</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">User <span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;往Acess Server中的User表添加一条记录\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;根据id得到Acess Server中User表一条记录\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface IFactory</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     public function CreateUser();</span></span><br><span class="line"><span class="comment">//     public function CreateDepartment();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// class SqlserverFactory implements IFactory</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     public function CreateUser()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         return new SqlserverUser();</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     public function CreateDepartment()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         return new SqlserverDepartment();</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// class AcessFactory implements IFactory</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     public function CreateUser()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         return new AcessUser();</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     public function CreateDepartment()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         return new AcessDepartment();</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//简单工厂替换抽象工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataBase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">DB</span> = <span class="string">&#x27;Sqlserver&#x27;</span>;</span><br><span class="line">    <span class="comment">// private $db = &#x27;Access&#x27;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateUser</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="variable">$class</span> = <span class="built_in">static</span>::<span class="variable constant_">DB</span>.<span class="string">&#x27;User&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$class</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateDepartment</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$class</span> = <span class="built_in">static</span>::<span class="variable constant_">DB</span>.<span class="string">&#x27;Department&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$class</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IDepartment</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">Department <span class="variable">$user</span></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDepartment</span>(<span class="params"><span class="variable">$id</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlserverDepartment</span> <span class="keyword">implements</span> <span class="title">IDepartment</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">Department <span class="variable">$department</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;往SQL Server中的Department表添加一条记录\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDepartment</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;根据id得到SQL Server中Department表一条记录\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AcessDepartment</span> <span class="keyword">implements</span> <span class="title">IDepartment</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">Department <span class="variable">$department</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;往Acess Server中的Department表添加一条记录\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDepartment</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;根据id得到Acess Server中Department表一条记录\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="comment">// $user = new User();</span></span><br><span class="line"><span class="comment">// $iu = (new AcessFactory())-&gt;CreateUser();</span></span><br><span class="line"><span class="comment">// $iu-&gt;insert($user);</span></span><br><span class="line"><span class="comment">// $iu-&gt;getUser(1);</span></span><br><span class="line"><span class="comment">// $department = new Department();</span></span><br><span class="line"><span class="comment">// $id = (new AcessFactory())-&gt;CreateDepartment();</span></span><br><span class="line"><span class="comment">// $id-&gt;insert($department);</span></span><br><span class="line"><span class="comment">// $id-&gt;getDepartment(1);</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//改为简单工厂后的客户端代码</span></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$iu</span> = <span class="title class_">DataBase</span>::<span class="title function_ invoke__">CreateUser</span>();</span><br><span class="line"><span class="variable">$iu</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="variable">$iu</span>-&gt;<span class="title function_ invoke__">getUser</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$department</span> = <span class="keyword">new</span> <span class="title class_">Department</span>();</span><br><span class="line"><span class="variable">$id</span> = <span class="title class_">DataBase</span>::<span class="title function_ invoke__">CreateDepartment</span>();</span><br><span class="line"><span class="variable">$id</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$department</span>);</span><br><span class="line"><span class="variable">$id</span>-&gt;<span class="title function_ invoke__">getDepartment</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-12"><a href="#总结-12" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>抽象工厂模式，提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们的具体类。</p>
<p>菜鸟程序员遇到问题，只会用时间来摆平。</p>
<p>工厂方法模式是定义一个用于创建对象的接口，让子类决定实例化哪一个类。</p>
<p>抽象工厂模式的好处便是易于交换产品系列，由于具体工厂类，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只是需要改变具体工厂即可使用不同的产品配置。它让具体的创建实例过程与客户端分离，客户端是通过它们的抽象接口操作实例，产品的具体类名也被具体工厂的实现分离，不会出现在客户端代码中。</p>
<p>编程是门艺术，大批量的改动是非常丑陋的做法。</p>
<p>所有在用简单工厂的地方，都可以考虑用反射技术来去除switch或if，解除分支判断代码的耦合。</p>
</blockquote>
<h1 id="14-【状态模式】无尽加班何时休"><a href="#14-【状态模式】无尽加班何时休" class="headerlink" title="14.【状态模式】无尽加班何时休"></a>14.【状态模式】无尽加班何时休</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工作状态</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">WriteProgram</span>(<span class="params">Work <span class="variable">$w</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForenoonState</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">WriteProgram</span>(<span class="params">Work <span class="variable">$w</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getHour</span>() &lt; <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;当前时间：&quot;</span>.<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getHour</span>().<span class="string">&quot; 上午工作，精神百倍\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="keyword">new</span> <span class="title class_">NoonState</span>());</span><br><span class="line">            <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoonState</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">WriteProgram</span>(<span class="params">Work <span class="variable">$w</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getHour</span>() &lt; <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;当前时间：&quot;</span>.<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getHour</span>().<span class="string">&quot; 饿了，午饭；犯困，午休\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="keyword">new</span> <span class="title class_">AfterNoonState</span>());</span><br><span class="line">            <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AfterNoonState</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">WriteProgram</span>(<span class="params">Work <span class="variable">$w</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getHour</span>() &lt; <span class="number">17</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;当前时间：&quot;</span>.<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getHour</span>().<span class="string">&quot; 下午状态不错，继续努力\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="keyword">new</span> <span class="title class_">EveningState</span>());</span><br><span class="line">            <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EveningState</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">WriteProgram</span>(<span class="params">Work <span class="variable">$w</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getTaskFinishedState</span>()) &#123;</span><br><span class="line">            <span class="comment">//如果完成任务，下班</span></span><br><span class="line">            <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="keyword">new</span> <span class="title class_">RestState</span>());</span><br><span class="line">            <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getHour</span>() &lt; <span class="number">21</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;当前时间：&quot;</span>.<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getHour</span>().<span class="string">&quot; 加班哦，疲惫之极\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//超过21点，则转入睡眠工作状态</span></span><br><span class="line">                <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="keyword">new</span> <span class="title class_">SleepingState</span>());</span><br><span class="line">                <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SleepingState</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">WriteProgram</span>(<span class="params">Work <span class="variable">$w</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;当前时间：&quot;</span>.<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getHour</span>().<span class="string">&quot; 不行了，睡觉\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestState</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">WriteProgram</span>(<span class="params">Work <span class="variable">$w</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;当前时间：&quot;</span>.<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">getHour</span>().<span class="string">&quot; 下班回家\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$current</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;current = <span class="keyword">new</span> <span class="title class_">ForenoonState</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$hour</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHour</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;hour;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHour</span>(<span class="params"><span class="variable">$hour</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hour = <span class="variable">$hour</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$finished</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTaskFinished</span>(<span class="params"><span class="variable">$bool</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;finished = <span class="variable">$bool</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTaskFinishedState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;finished;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">State <span class="variable">$state</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;current = <span class="variable">$state</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">WriteProgram</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;current-&gt;<span class="title function_ invoke__">WriteProgram</span>(<span class="variable">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="variable">$emergencyProjects</span> = <span class="keyword">new</span> <span class="title class_">Work</span>();</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">setHour</span>(<span class="number">9</span>);</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">setHour</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">setHour</span>(<span class="number">12</span>);</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">setHour</span>(<span class="number">13</span>);</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">setHour</span>(<span class="number">14</span>);</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">setHour</span>(<span class="number">17</span>);</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">setTaskFinished</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">setHour</span>(<span class="number">19</span>);</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">setHour</span>(<span class="number">22</span>);</span><br><span class="line"><span class="variable">$emergencyProjects</span>-&gt;<span class="title function_ invoke__">WriteProgram</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-13"><a href="#总结-13" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>状态模式，当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。</p>
<p>面向对象设计其实就是希望做到代码的责任分解。</p>
<p>状态模式主要解决的当控制一个对象状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简单化。</p>
<p>将于特定状态相关的行为局部化，并且将不同状态的行为分割开来。</p>
<p>将特定的状态相关的行为都放入一个对象中，由于所有与状态相关的代码都存在于某个ConcreteState中，所以通过定义的子类可以很容易地增加新的状态和转换。</p>
<p>消除了庞大的条件分支语句。</p>
<p>状态模式通过把各种状态转移逻辑分布到State的子类之间，来减少项目之间的依赖。</p>
<p>当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用状态模式了。</p>
</blockquote>
<h1 id="15-【适配器模式】在NBA我需要翻译"><a href="#15-【适配器模式】在NBA我需要翻译" class="headerlink" title="15.【适配器模式】在NBA我需要翻译"></a>15.【适配器模式】在NBA我需要翻译</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//篮球翻译适配器</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Attack</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Defense</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前锋</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Forwards</span> <span class="keyword">extends</span> <span class="title">Player</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Attack</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;前锋:&quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot; 进攻\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Defense</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;前锋:&quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot; 防守\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中锋</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Center</span> <span class="keyword">extends</span> <span class="title">Player</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Attack</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;中锋:&quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot; 进攻\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Defense</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;中锋:&quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot; 防守\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外籍中锋</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForeignCenter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 进攻(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;外籍中锋:&quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot; 进攻\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 防守(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;外籍中锋:&quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot; 防守\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//翻译者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Translator</span> <span class="keyword">extends</span> <span class="title">Player</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$foreignCenter</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;foreignCenter = <span class="keyword">new</span> <span class="title class_">ForeignCenter</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;foreignCenter-&gt;<span class="title function_ invoke__">setName</span>(<span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Attack</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;foreignCenter-&gt;进攻();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Defense</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;foreignCenter-&gt;防守();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="variable">$forwards</span> = <span class="keyword">new</span> <span class="title class_">Forwards</span>(<span class="string">&quot;巴蒂尔&quot;</span>);</span><br><span class="line"><span class="variable">$forwards</span>-&gt;<span class="title function_ invoke__">Attack</span>();</span><br><span class="line"><span class="variable">$forwards</span>-&gt;<span class="title function_ invoke__">Defense</span>();</span><br><span class="line"><span class="variable">$translator</span> = <span class="keyword">new</span> <span class="title class_">Translator</span>(<span class="string">&quot;姚明&quot;</span>);</span><br><span class="line"><span class="variable">$translator</span>-&gt;<span class="title function_ invoke__">Attack</span>();</span><br><span class="line"><span class="variable">$translator</span>-&gt;<span class="title function_ invoke__">Defense</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-14"><a href="#总结-14" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>适配器模式，将一个类的接口转化成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<p>系统的数据和行为都正确，但接口不符时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。适配器模式主要应用于希望复用一些现存的类。但是接口又与复用环境要求不一致的情况。</p>
<p>两个类所做的事情相同或相似，但是具有不同的接口时要使用它。</p>
<p>在双方都不太容易修改的时候再使用适配器模式适配。</p>
</blockquote>
<h1 id="16-【备忘录模式】如果再回到从前"><a href="#16-【备忘录模式】如果再回到从前" class="headerlink" title="16.【备忘录模式】如果再回到从前"></a>16.【备忘录模式】如果再回到从前</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//发起人类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span></span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="comment">// 需要保存的属性，可能有多个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$state</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params"><span class="variable">$state</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="variable">$state</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建备忘录，将当前需要保存的信息导入并实例化出一个memento对象。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createMemento</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(<span class="variable language_">$this</span>-&gt;state);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//恢复备忘录，将memento导入并将相关数据恢复。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMemento</span>(<span class="params">Memento <span class="variable">$memento</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="variable">$memento</span>-&gt;<span class="title function_ invoke__">getState</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;status &quot;</span>.<span class="variable language_">$this</span>-&gt;state.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//备忘录类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$state</span>;</span><br><span class="line">    <span class="comment">//构造方法，将相关数据导入</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$state</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="variable">$state</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取需要保存的数据，可以多个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//管理者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$memento</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMemento</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;memento;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置备忘录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMemento</span>(<span class="params">Memento <span class="variable">$memento</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;memento = <span class="variable">$memento</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端程序</span></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">Originator</span>(); <span class="comment">//Originator初始状态，状态属性on</span></span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="string">&quot;On&quot;</span>);</span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="comment">//保存状态时，由于有了很好的封装，可以隐藏Originator的实现细节</span></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">CareTaker</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">setMemento</span>(<span class="variable">$o</span>-&gt;<span class="title function_ invoke__">createMemento</span>());</span><br><span class="line"><span class="comment">// 改变属性</span></span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="string">&quot;Off&quot;</span>);</span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="comment">// 恢复属性</span></span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">setMemento</span>(<span class="variable">$c</span>-&gt;<span class="title function_ invoke__">getMemento</span>());</span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-15"><a href="#总结-15" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>备忘录模式，在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之前保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>
<p>代码无措未必优</p>
<p>如果在某个系统中使用命令模式时，需要实现命令的撤销功能，那么命令模式可以使用备忘录模式来存储可撤销操作的状态。</p>
<p>使用备忘录可以把复杂的对象内部信息对其他的对象屏蔽起来。</p>
</blockquote>
<h1 id="17-【组合模式】分公司-x3D-一部分"><a href="#17-【组合模式】分公司-x3D-一部分" class="headerlink" title="17.【组合模式】分公司&#x3D;一部分"></a>17.【组合模式】分公司&#x3D;一部分</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// component为组合中的对象接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理Component的字部件。</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通常用add和remove方法来提供增加或移除树枝货树叶的功能</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">Component <span class="variable">$c</span></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">Component <span class="variable">$c</span></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$depth</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leaf在组合中表示叶节点对象，叶节点对象没有子节点。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="comment">// 由于叶子没有再增加分枝和树叶，所以add和remove方法实现它没有意义，</span></span><br><span class="line">    <span class="comment">// 但这样做可以消除叶节点和枝节点对象在抽象层次的区别，它们具有完全一致的接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">Component <span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;can not add to a leaf\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">Component <span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;can not remove to a leaf\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 叶节点的具体方法，此处是显示其名称和级别</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$depth</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;-&#x27;</span>, <span class="variable">$depth</span>).<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//composite定义有枝节点行为，用来存储子部件，在Component接口中实现与子部件有关的操作，比如增加add和删除remove.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//一个子对象集合用来存储其下属的枝节点和叶节点。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$childern</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">Component <span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;childern, <span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">Component <span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;childern <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$c</span> === <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;childern[<span class="variable">$key</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 显示其枝节点名称，并对其下级进行遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$depth</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;-&#x27;</span>, <span class="variable">$depth</span>).<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;childern <span class="keyword">as</span> <span class="variable">$component</span>) &#123;</span><br><span class="line">            <span class="variable">$component</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="variable">$depth</span> + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="variable">$root</span> = <span class="keyword">new</span> <span class="title class_">Composite</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="variable">$root</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;Leaf A&quot;</span>));</span><br><span class="line"><span class="variable">$root</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;Leaf B&quot;</span>));</span><br><span class="line"><span class="variable">$comp</span> = <span class="keyword">new</span> <span class="title class_">Composite</span>(<span class="string">&quot;Composite X&quot;</span>);</span><br><span class="line"><span class="variable">$comp</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;Leaf XA&quot;</span>));</span><br><span class="line"><span class="variable">$comp</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;Leaf XB&quot;</span>));</span><br><span class="line"><span class="variable">$root</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$comp</span>);</span><br><span class="line"><span class="variable">$comp2</span> = <span class="keyword">new</span> <span class="title class_">Composite</span>(<span class="string">&quot;Composite X&quot;</span>);</span><br><span class="line"><span class="variable">$comp2</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;Leaf XA&quot;</span>));</span><br><span class="line"><span class="variable">$comp2</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;Leaf XB&quot;</span>));</span><br><span class="line"><span class="variable">$comp</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$comp2</span>);</span><br><span class="line"><span class="variable">$root</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="keyword">new</span>  <span class="title class_">Leaf</span>(<span class="string">&quot;Leaf C&quot;</span>));</span><br><span class="line"><span class="variable">$leaf</span> = <span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;Leaf D&quot;</span>);</span><br><span class="line"><span class="variable">$root</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$leaf</span>);</span><br><span class="line"><span class="variable">$root</span>-&gt;<span class="title function_ invoke__">remove</span>(<span class="variable">$leaf</span>);</span><br><span class="line"><span class="variable">$root</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-16"><a href="#总结-16" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>组合模式，将对象组合成树形结构以表示‘部分与整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
<p>透明方式，子类的所有接口一致，虽然有些接口没有用。</p>
<p>安全方式，子类接口不一致，只实现特定的接口，但是这样就要做相应的判断，带来了不便。</p>
<p>需求中是体现部分与整体层次的结构时，或希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就应该考虑用组合模式了。</p>
<p>组合模式可以让客户一致地使用组合结构和单个对象。</p>
</blockquote>
<h1 id="18-【迭代器模式】想走？可以！先买票"><a href="#18-【迭代器模式】想走？可以！先买票" class="headerlink" title="18.【迭代器模式】想走？可以！先买票"></a>18.【迭代器模式】想走？可以！先买票</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//迭代器抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isDone</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">currentItem</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 聚集抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Aggregate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">createIterator</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">extends</span> <span class="title">IteratorClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$aggregate</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$current</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$aggregate</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;aggregate = <span class="variable">$aggregate</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;aggregate[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;current++;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;current &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;aggregate))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;aggregate[<span class="variable language_">$this</span>-&gt;current];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isDone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;current &gt;= <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;aggregate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">currentItem</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;aggregate[<span class="variable language_">$this</span>-&gt;current];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个类的代码感觉不符合书上的写法，但我感觉书上的不对，可能我知识面太单薄，没读懂，可自行参阅原著?。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">extends</span> <span class="title">Aggregate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$items</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createIterator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteIterator</span>(<span class="variable language_">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;items);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$item</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;items, <span class="variable">$item</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">items</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">ConcreteAggregate</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="string">&quot;大鸟&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="string">&quot;小菜&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="string">&quot;行李&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="string">&quot;老外&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="string">&quot;公交内部员工&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="string">&quot;小偷&quot;</span>);</span><br><span class="line"><span class="variable">$i</span> = <span class="keyword">new</span> <span class="title class_">ConcreteIterator</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">items</span>());</span><br><span class="line"><span class="keyword">while</span> (!<span class="variable">$i</span>-&gt;<span class="title function_ invoke__">isDone</span>()) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>-&gt;<span class="title function_ invoke__">currentItem</span>().<span class="string">&quot; 请买票\n&quot;</span>;</span><br><span class="line">    <span class="variable">$i</span>-&gt;<span class="title function_ invoke__">next</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-17"><a href="#总结-17" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>当你需要对聚集有多种方式遍历时，可以考虑用迭代器模式。</p>
<p>当你需要访问一个聚集对象，而且不管这些对象是什么都需要遍历的时候，你就应该考虑用迭代器模式。</p>
<p>为遍历不同的聚集结构提供如开始、下一个、是否结束、当前哪一项等统一的接口。</p>
<p>迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合内部的结构，又可让外部代码透明地访问集合内部的数据。</p>
</blockquote>
<h1 id="19-【单例模式】有些类也需要计划生育"><a href="#19-【单例模式】有些类也需要计划生育" class="headerlink" title="19.【单例模式】有些类也需要计划生育"></a>19.【单例模式】有些类也需要计划生育</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">static</span>::<span class="variable">$instance</span> == <span class="literal">null</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">static</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="variable">$s1</span> = <span class="title class_">Singleton</span>::<span class="title function_ invoke__">getInstance</span>();</span><br><span class="line"><span class="variable">$s2</span> = <span class="title class_">Singleton</span>::<span class="title function_ invoke__">getInstance</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$s1</span> == <span class="variable">$s2</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;same class&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-18"><a href="#总结-18" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>单例模式，保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<p>单例模式因为Singleton类封装它的唯一实例，这样它可以严格地控制客户怎样访问以及何时访问它。简单地说就是对唯一实例的受控访问。</p>
</blockquote>
<h1 id="20-【桥接模式】手机软件何时统一"><a href="#20-【桥接模式】手机软件何时统一" class="headerlink" title="20.【桥接模式】手机软件何时统一"></a>20.【桥接模式】手机软件何时统一</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//手机软件</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetSoft</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//游戏、通讯录等具体类</span></span><br><span class="line"><span class="comment">//手机游戏</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandsetGame</span> <span class="keyword">extends</span> <span class="title">HandsetSoft</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;运行手机游戏\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//手机通讯录</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandsetAddressList</span> <span class="keyword">extends</span> <span class="title">HandsetSoft</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;运行手机通讯录\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//手机品牌类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetBrand</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$soft</span>;</span><br><span class="line">    <span class="comment">//设置手机软件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHandsetSoft</span>(<span class="params">HandsetSoft <span class="variable">$soft</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;soft = <span class="variable">$soft</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//运行</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手机品牌n</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandsetBrandN</span> <span class="keyword">extends</span> <span class="title">HandsetBrand</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;soft-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手机品牌m</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandsetBrandM</span> <span class="keyword">extends</span> <span class="title">HandsetBrand</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;soft-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端调用代码</span></span><br><span class="line"><span class="variable">$ab</span> = <span class="keyword">new</span> <span class="title function_ invoke__">HandsetBrandN</span>();</span><br><span class="line"><span class="variable">$ab</span>-&gt;<span class="title function_ invoke__">setHandsetSoft</span>(<span class="keyword">new</span> <span class="title class_">HandsetGame</span>());</span><br><span class="line"><span class="variable">$ab</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line"><span class="variable">$ab</span>-&gt;<span class="title function_ invoke__">setHandsetSoft</span>(<span class="keyword">new</span> <span class="title class_">HandsetAddressList</span>());</span><br><span class="line"><span class="variable">$ab</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line"><span class="variable">$ab</span> = <span class="keyword">new</span> <span class="title function_ invoke__">HandsetBrandM</span>();</span><br><span class="line"><span class="variable">$ab</span>-&gt;<span class="title function_ invoke__">setHandsetSoft</span>(<span class="keyword">new</span> <span class="title class_">HandsetGame</span>());</span><br><span class="line"><span class="variable">$ab</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line"><span class="variable">$ab</span>-&gt;<span class="title function_ invoke__">setHandsetSoft</span>(<span class="keyword">new</span> <span class="title class_">HandsetAddressList</span>());</span><br><span class="line"><span class="variable">$ab</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br></pre></td></tr></table></figure></div>
<h2 id="总结-19"><a href="#总结-19" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>桥接模式，将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>
<p>合成&#x2F;聚合复用原则，尽量使用合成&#x2F;聚合，尽量不要使用类继承。</p>
<p>聚合表示弱的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强的‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。</p>
<p>对象的继承关系是在编译时就定义好了，所以无法在运行时改变从父类继承的实现。子类的实现与它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化。当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或被其他更合适的类替换。这种依赖关系限制了灵活性并最终限制了复用性。</p>
<p>优先使用对象的合成&#x2F;聚合将有助于你保持每个类被封装，并被集中在单个任务上。这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。</p>
<p>什么叫抽象与它的实现分离，这并不是说，让抽象类与其派生类分离，因为这没有任何意义。实现指的是抽象类和它的派生类用来实现自己的对象。</p>
<p>实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。</p>
<p>只要真正深入地理解了设计原则，很多设计模式其实就是原则的应用而已，或许在不知不觉中就在使用设计模式了</p>
</blockquote>
<h1 id="21-【命令模式】烤羊肉串引来的思考"><a href="#21-【命令模式】烤羊肉串引来的思考" class="headerlink" title="21.【命令模式】烤羊肉串引来的思考"></a>21.【命令模式】烤羊肉串引来的思考</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//烤串</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Barbecuer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bakeMutton</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;烤羊肉串\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bakeChickenWing</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;烤鸡翅\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象命令</span></span><br><span class="line"><span class="keyword">abstract</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$receiver</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Barbecuer <span class="variable">$receiver</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;receiver = <span class="variable">$receiver</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">excuteCommand</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//烤羊肉</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BakeMuttonCommand</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">excuteCommand</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;receiver-&gt;<span class="title function_ invoke__">bakeMutton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//烤鸡翅</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BakeChickenWingCommand</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">excuteCommand</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;receiver-&gt;<span class="title function_ invoke__">bakeChickenWing</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//服务员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waiter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$commands</span> = [];</span><br><span class="line">    <span class="comment">//设置订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setOrder</span>(<span class="params">Command <span class="variable">$command</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$command</span> <span class="keyword">instanceof</span> BakeChickenWingCommand)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;服务员： 鸡翅没有了，请点别的烧烤\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;增加订单\n&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;commands, <span class="variable">$command</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取消订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span>(<span class="params">Command <span class="variable">$command</span></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//通知执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;commands <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$value</span>-&gt;<span class="title function_ invoke__">excuteCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="comment">//开店前准备</span></span><br><span class="line"><span class="variable">$boy</span> = <span class="keyword">new</span> <span class="title class_">Barbecuer</span>();</span><br><span class="line"><span class="variable">$bakeMuttonCommand1</span> = <span class="keyword">new</span> <span class="title class_">BakeMuttonCommand</span>(<span class="variable">$boy</span>);</span><br><span class="line"><span class="variable">$bakeMuttonCommand2</span> = <span class="keyword">new</span> <span class="title class_">BakeMuttonCommand</span>(<span class="variable">$boy</span>);</span><br><span class="line"><span class="variable">$bakeChickenWingCommand1</span> = <span class="keyword">new</span> <span class="title class_">BakeChickenWingCommand</span>(<span class="variable">$boy</span>);</span><br><span class="line"><span class="variable">$girl</span> = <span class="keyword">new</span> <span class="title class_">Waiter</span>();</span><br><span class="line"><span class="comment">//开门营业</span></span><br><span class="line"><span class="variable">$girl</span>-&gt;<span class="title function_ invoke__">setOrder</span>(<span class="variable">$bakeMuttonCommand1</span>);</span><br><span class="line"><span class="variable">$girl</span>-&gt;<span class="title function_ invoke__">setOrder</span>(<span class="variable">$bakeMuttonCommand2</span>);</span><br><span class="line"><span class="variable">$girl</span>-&gt;<span class="title function_ invoke__">setOrder</span>(<span class="variable">$bakeChickenWingCommand1</span>);</span><br><span class="line"><span class="variable">$girl</span>-&gt;<span class="title function_ invoke__">notify</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-20"><a href="#总结-20" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>命令模式，将 一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p>
<p>对请求派对或记录请求日志，以及日志可撤销的操作。</p>
<p>优点：第一，能较容易地设计一个命令队列；第二，在需要的情况下，可以较容易地将命令记入日志；第三，允许请求的一方决定是否要否决请求；第四，可以容易地实现对请求的撤销和重做；第五，由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易；最重要的是该 模式把请求一个操作的对象与知道怎么执行一个操作的对象分隔开。</p>
<p>敏捷开发原则告诉我们，不要为代码添加基于猜测的、实际不需要的功能。如果不清楚一个系统是否需要命令模式，一般就不要急着去实现它，事实上，在需要的时候通过重构实现这个模式并不难，只有在真正需要如撤销&#x2F;恢复操作等功能时，把原来的代码重构为命令模式才有意义。</p>
</blockquote>
<h1 id="22-【职责链模式】加薪非要老总批"><a href="#22-【职责链模式】加薪非要老总批" class="headerlink" title="22.【职责链模式】加薪非要老总批"></a>22.【职责链模式】加薪非要老总批</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$successor</span>;</span><br><span class="line">    <span class="comment">//设置继承者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSuccessor</span>(<span class="params">Handler <span class="variable">$successor</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;successor = <span class="variable">$successor</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理请求的抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$request</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果可以处理请求，就处理之，否者转发给它的后继者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request</span> &gt;=<span class="number">0</span> &amp;&amp; <span class="variable">$request</span> &lt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ConcreteHandler1 handle it\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;successor != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="comment">// 转移</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;successor-&gt;<span class="title function_ invoke__">handleRequest</span>(<span class="variable">$request</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request</span> &gt;=<span class="number">10</span> &amp;&amp; <span class="variable">$request</span> &lt; <span class="number">20</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ConcreteHandler2 handle it\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;successor != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;successor-&gt;<span class="title function_ invoke__">handleRequest</span>(<span class="variable">$request</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="variable">$h1</span> = <span class="keyword">new</span> <span class="title class_">ConcreteHandler1</span>();</span><br><span class="line"><span class="variable">$h2</span> = <span class="keyword">new</span> <span class="title class_">ConcreteHandler2</span>();</span><br><span class="line">设置职责链上下家</span><br><span class="line"><span class="variable">$h1</span>-&gt;<span class="title function_ invoke__">setSuccessor</span>(<span class="variable">$h2</span>);</span><br><span class="line"><span class="variable">$requests</span> = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">16</span>,<span class="number">25</span>];</span><br><span class="line">循环给最小处理者提交请求，不同的数额，由不同权限处理者处理</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$requests</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$h1</span>-&gt;<span class="title function_ invoke__">handleRequest</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="总结-21"><a href="#总结-21" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>职责链模式， 使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对像处理它为止。</p>
<p>当用户提交一个请求时，请求是沿着链传递直至有一个对象负责处理它。</p>
<p>接受者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。结果是职责链可简化对象的相互连接，它们仅需要保持一个向其后继者的引用，而不需要保持它所有的候选者的引用。</p>
<p>随时地增加或修改处理一个请求的结构。增强了给对象指派职责的灵活性。</p>
<p>一个请求极有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理。</p>
</blockquote>
<h1 id="23-【中介者模式】世界需要和平"><a href="#23-【中介者模式】世界需要和平" class="headerlink" title="23.【中介者模式】世界需要和平"></a>23.【中介者模式】世界需要和平</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"><span class="variable">$message</span>, Colleague <span class="variable">$colleague</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$mediator</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Mediator <span class="variable">$mediator</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mediator = <span class="variable">$mediator</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$colleague1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$colleague2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColleague1</span>(<span class="params">Colleague <span class="variable">$colleague</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;colleague1 = <span class="variable">$colleague</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColleague2</span>(<span class="params">Colleague <span class="variable">$colleague</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;colleague2 = <span class="variable">$colleague</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"><span class="variable">$message</span>, Colleague <span class="variable">$colleague</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;colleague1 == <span class="variable">$colleague</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;colleague2-&gt;<span class="title function_ invoke__">notify</span>(<span class="variable">$message</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;colleague1-&gt;<span class="title function_ invoke__">notify</span>(<span class="variable">$message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"><span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">send</span>(<span class="variable">$message</span>, <span class="variable">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"><span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteColleague1 &quot;</span>.<span class="variable">$message</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"><span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">send</span>(<span class="variable">$message</span>, <span class="variable">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"><span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteColleague2 &quot;</span>.<span class="variable">$message</span>.<span class="string">&quot;\n&quot;</span>;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//client</span></span><br><span class="line"><span class="variable">$mediator</span> = <span class="keyword">new</span> <span class="title class_">ConcreteMediator</span>();</span><br><span class="line"><span class="variable">$c1</span> = <span class="keyword">new</span> <span class="title class_">ConcreteColleague1</span>(<span class="variable">$mediator</span>);</span><br><span class="line"><span class="variable">$c2</span> = <span class="keyword">new</span> <span class="title class_">ConcreteColleague2</span>(<span class="variable">$mediator</span>);</span><br><span class="line"><span class="variable">$mediator</span>-&gt;<span class="title function_ invoke__">setColleague1</span>(<span class="variable">$c1</span>);</span><br><span class="line"><span class="variable">$mediator</span>-&gt;<span class="title function_ invoke__">setColleague2</span>(<span class="variable">$c2</span>);</span><br><span class="line"><span class="variable">$c1</span>-&gt;<span class="title function_ invoke__">send</span>(<span class="string">&#x27;do you eat?&#x27;</span>);</span><br><span class="line"><span class="variable">$c2</span>-&gt;<span class="title function_ invoke__">send</span>(<span class="string">&#x27;no, do you want to invite me to dinner?&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-22"><a href="#总结-22" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>中介者模式，用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互交互，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
<p>尽管将一个系统分割成许多对象通常可以增加其可复用性，但是对象间的交互连接的激增又会降低其可复用性了。</p>
<p>大量的连接使得一个对象不大可能在没有其他对象的支持下工作，系统表现为一个不可分割的整体，所以，对系统的行为进行任何较大的改动就十分困难了。</p>
<p>中介者模式很容易在系统中应用，也很容易在系统中误用。当系统出现了‘多对多’交互复杂的对象群时，不要急于使用中介者模式，而要反思你的系统设计上是不是合理。</p>
<p>由于把对象如何协作进行了抽象，将中介作为一个独立的概念并将其封装在一个对象中，这样关注的对象就从对象各自本身的行为转移到它们之间的交互上来，也就是站在一个更宏观的角度去看待系统。</p>
<p>中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的结合，以及想定制一个分布在多个类中的行为，而又不想生成太多的子类的场合。</p>
</blockquote>
<h1 id="24-【享元模式】项目多也别做傻事"><a href="#24-【享元模式】项目多也别做傻事" class="headerlink" title="24.【享元模式】项目多也别做傻事"></a>24.【享元模式】项目多也别做傻事</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSite</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="keyword">use</span>(<span class="params">User <span class="variable">$user</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体网站类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteWebSite</span> <span class="keyword">extends</span> <span class="title">WebSite</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="keyword">use</span>(<span class="params">User <span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;网站分类: &quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;用户:&quot;</span>.<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">getName</span>().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//网站工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSiteFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flyweights</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWebSiteGategory</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;flyweights[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;flyweights[<span class="variable">$key</span>] = <span class="keyword">new</span> <span class="title class_">ConcreteWebSite</span>(<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;flyweights[<span class="variable">$key</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWebSiteCount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;flyweights);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$f</span> = <span class="keyword">new</span> <span class="title class_">WebSiteFactory</span>();</span><br><span class="line"><span class="variable">$fx</span> = <span class="variable">$f</span>-&gt;<span class="title function_ invoke__">getWebSiteGategory</span>(<span class="string">&#x27;产品展示&#x27;</span>);</span><br><span class="line"><span class="variable">$fx</span>-&gt;<span class="keyword">use</span>(<span class="title">new</span> <span class="title">User</span>(&#x27;张伟&#x27;));</span><br><span class="line"><span class="variable">$fy</span> = <span class="variable">$f</span>-&gt;<span class="title function_ invoke__">getWebSiteGategory</span>(<span class="string">&#x27;产品展示&#x27;</span>);</span><br><span class="line"><span class="variable">$fy</span>-&gt;<span class="keyword">use</span>(<span class="title">new</span> <span class="title">User</span>(&#x27;王伟&#x27;));</span><br><span class="line"><span class="variable">$fz</span> = <span class="variable">$f</span>-&gt;<span class="title function_ invoke__">getWebSiteGategory</span>(<span class="string">&#x27;产品展示&#x27;</span>);</span><br><span class="line"><span class="variable">$fz</span>-&gt;<span class="keyword">use</span>(<span class="title">new</span> <span class="title">User</span>(&#x27;王芳&#x27;));</span><br><span class="line"><span class="variable">$fl</span> = <span class="variable">$f</span>-&gt;<span class="title function_ invoke__">getWebSiteGategory</span>(<span class="string">&#x27;博客&#x27;</span>);</span><br><span class="line"><span class="variable">$fl</span>-&gt;<span class="keyword">use</span>(<span class="title">new</span> <span class="title">User</span>(&#x27;李伟&#x27;));</span><br><span class="line"><span class="variable">$fm</span> = <span class="variable">$f</span>-&gt;<span class="title function_ invoke__">getWebSiteGategory</span>(<span class="string">&#x27;博客&#x27;</span>);</span><br><span class="line"><span class="variable">$fm</span>-&gt;<span class="keyword">use</span>(<span class="title">new</span> <span class="title">User</span>(&#x27;王秀英&#x27;));</span><br><span class="line"><span class="variable">$fn</span> = <span class="variable">$f</span>-&gt;<span class="title function_ invoke__">getWebSiteGategory</span>(<span class="string">&#x27;博客&#x27;</span>);</span><br><span class="line"><span class="variable">$fn</span>-&gt;<span class="keyword">use</span>(<span class="title">new</span> <span class="title">User</span>(&#x27;李秀英&#x27;));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;网站分类总数:&quot;</span>.<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">getWebSiteCount</span>().<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-23"><a href="#总结-23" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>享原模式 运用共享技术有效地支持大量细粒度的对象</p>
<p>享原模式可以避免大量非常类似类的开销。在程序设计中，有时需要生成大量细粒度的类实例来表示数据。如果能发现这些实例除了几个参数外基本上都是相同的，有时就能够受大幅度地减少需要实例化的类的数量。如果能把参数移到类实例的外面，在方法调用时将它们传递进来，就可以通过共享大幅度地减少单个实例的数目。</p>
<p>如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销时就应该考虑使用；还有就是对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象，此时可以考虑使用享原模式。</p>
</blockquote>
<h1 id="25-【解释器模式】其实你不懂老板的心"><a href="#25-【解释器模式】其实你不懂老板的心" class="headerlink" title="25.【解释器模式】其实你不懂老板的心"></a>25.【解释器模式】其实你不懂老板的心</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractExpression</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">interpret</span>(<span class="params">Context <span class="variable">$context</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">implements</span> <span class="title">AbstractExpression</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">interpret</span>(<span class="params">Context <span class="variable">$context</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;终端解释器\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonTerminalExpression</span> <span class="keyword">implements</span> <span class="title">AbstractExpression</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">interpret</span>(<span class="params">Context <span class="variable">$context</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;非终端解释器\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$input</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setInput</span>(<span class="params"><span class="variable">$input</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;input = <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInput</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;input;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$output</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setOutput</span>(<span class="params"><span class="variable">$output</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;output = <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOutput</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$context</span> = <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line"><span class="variable">$syntax</span> = [];</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$syntax</span>, <span class="keyword">new</span> <span class="title class_">TerminalExpression</span>());</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$syntax</span>, <span class="keyword">new</span> <span class="title class_">NonTerminalExpression</span>());</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$syntax</span>, <span class="keyword">new</span> <span class="title class_">TerminalExpression</span>());</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$syntax</span>, <span class="keyword">new</span> <span class="title class_">TerminalExpression</span>());</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$syntax</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$value</span>-&gt;<span class="title function_ invoke__">interpret</span>(<span class="variable">$context</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-24"><a href="#总结-24" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>解释器模式，给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言的句子。</p>
<p>如果一种特定语言类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p>
<p>通常当有一个语言需要解释执行，并且你可将该语言的句子表示为一个抽象语法树时，可使用解释器模式。</p>
<p>解释器模式容易修改和扩展文法，因为解释器模式使用类来表示文法规则，你可使用继承来改变或扩展该文法。也比较容易实现文法，因为定义抽象语法树中各个节点的类的实现大体类似，这些类都易于直接编写。</p>
<p>解释器模式不足的是要为文法中的每一条规则至少定义了一个类，因此包含许多规则的文法可能难以管理和维护。建议当文法非常复杂时，使用其他的技术如语法分析程序或编译器生成器来处理。</p>
</blockquote>
<h1 id="26-【访问者模式】男人和女人"><a href="#26-【访问者模式】男人和女人" class="headerlink" title="26.【访问者模式】男人和女人"></a>26.【访问者模式】男人和女人</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getManConclusion</span>(<span class="params">Man <span class="variable">$concreteElementA</span></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWomanConclusion</span>(<span class="params">Woman <span class="variable">$concreteElementB</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span>(<span class="params">Action <span class="variable">$visitor</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Success</span> <span class="keyword">extends</span> <span class="title">Action</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getManConclusion</span>(<span class="params">Man <span class="variable">$concreteElementA</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;背后多半有一个伟大的女人\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWomanConclusion</span>(<span class="params">Woman <span class="variable">$concreteElementB</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;背后多有一个不成功的男人\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Failing</span> <span class="keyword">extends</span> <span class="title">Action</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getManConclusion</span>(<span class="params">Man <span class="variable">$concreteElementA</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;男人失败时，闷头喝酒，谁也不用劝\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWomanConclusion</span>(<span class="params">Woman <span class="variable">$concreteElementB</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;女人失败时，眼泪汪汪，谁也劝不了\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Amativeness</span> <span class="keyword">extends</span> <span class="title">Action</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getManConclusion</span>(<span class="params">Man <span class="variable">$concreteElementA</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;男人恋爱时，凡事不懂也要装懂\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWomanConclusion</span>(<span class="params">Woman <span class="variable">$concreteElementB</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;女人恋爱时，遇事懂也装作不懂\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span>(<span class="params">Action <span class="variable">$visitor</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$visitor</span>-&gt;<span class="title function_ invoke__">getManConclusion</span>(<span class="variable">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span>(<span class="params">Action <span class="variable">$visitor</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$visitor</span>-&gt;<span class="title function_ invoke__">getWomanConclusion</span>(<span class="variable">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$person</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">acctch</span>(<span class="params">Person <span class="variable">$person</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;person, <span class="variable">$person</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params">Action <span class="variable">$visitor</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;person <span class="keyword">as</span> <span class="variable">$person</span>) &#123;</span><br><span class="line">            <span class="variable">$person</span>-&gt;<span class="title function_ invoke__">accept</span>(<span class="variable">$visitor</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">ObjectStructure</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">acctch</span>(<span class="keyword">new</span> <span class="title class_">Man</span>());</span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">acctch</span>(<span class="keyword">new</span> <span class="title class_">Woman</span>());</span><br><span class="line"><span class="comment">// 成功时的反应</span></span><br><span class="line"><span class="variable">$v1</span> = <span class="keyword">new</span> <span class="title class_">Success</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="variable">$v1</span>);</span><br><span class="line"><span class="variable">$v2</span> = <span class="keyword">new</span> <span class="title class_">Failing</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="variable">$v2</span>);</span><br><span class="line"><span class="variable">$v3</span> = <span class="keyword">new</span> <span class="title class_">Amativeness</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="variable">$v3</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="总结-25"><a href="#总结-25" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>访问者模式，表示一个作用于某对象结构中的各个元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
<p>访问者模式适合用于数据结构相对稳定的系统。它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。</p>
<p>访问者的目的是要把处理从数据结构分离出来。这样系统有比较稳定的数据结构，又有易于变化的算法的话，使用访问者模式就是比较合适的，因为访问者模式使得算法操作的增加变得容易。</p>
<p>增加新的操作容易，因为增加新的操作就意味着增加一个新的访问者。访问者将有关行为集中到一个访问者对象中。</p>
<p>访问者模式使增加新的数据结构变得困难了。</p>
</blockquote>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux+clash</title>
    <url>/linux-clash/</url>
    <content><![CDATA[<div class="note-large blue"><div class="notel-title"><p>环境</p>
</div><div class="notel-content"><p><strong>SERVER</strong>: CentOS 7.6</p>
</div></div>

<h2 id="1-更新系统及安装必要的包"><a href="#1-更新系统及安装必要的包" class="headerlink" title="1. 更新系统及安装必要的包"></a>1. 更新系统及安装必要的包</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update -y</span><br><span class="line">sudo yum install -y wget unzip</span><br></pre></td></tr></table></figure></div>

<h2 id="2-准备clash二进制文件"><a href="#2-准备clash二进制文件" class="headerlink" title="2. 准备clash二进制文件"></a>2. 准备clash二进制文件</h2><a class="button  regular" href='https://github.com/Dreamacro/clash/releases' title='跳转Github/Clash'><i class='fa-brands fa-github'></i> 跳转Github/Clash</a>
<p>例如我下载的是下图中框起来的<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qiniu.yangbaoyuan.cn/assets.png"
                      alt="image"
                ></p>
<p>毕竟是要在服务器上安装clash，所以推荐步骤是先下载到本地，然后使用SFTP上传到服务器，然后在服务器上解压<br>如果你想直接下载的话也可以使用<br><code>wget https://github.com/Dreamacro/clash/releases/download/v1.17.0/clash-linux-amd64-v1.17.0.gz</code><br>如果你不知道链接是什么，可以把鼠标放在对应包的上面，然后看浏览器的左下角（如果左下角没有就查看网页源代码）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qiniu.yangbaoyuan.cn/clashWgetUrl.png"
                      alt="image"
                ></p>
<p>下载到服务器上以后放在 <code>/usr/local/bin</code> 目录下解压然后重命名</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">gunzip clash-linux-amd64-v1.17.0.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重命名</span></span><br><span class="line">mv clash-linux-amd64-v1.17.0 clash</span><br></pre></td></tr></table></figure></div>




]]></content>
      <categories>
        <category>Linux</category>
        <category>clash</category>
      </categories>
      <tags>
        <tag>clash</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Docker</title>
    <url>/linux-insert-docker/</url>
    <content><![CDATA[<h2 id="安装额外的工具"><a href="#安装额外的工具" class="headerlink" title="安装额外的工具"></a>安装额外的工具</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure></div>


<h2 id="一-如果之前安装过Docker，可以使用下面命令卸载"><a href="#一-如果之前安装过Docker，可以使用下面命令卸载" class="headerlink" title="一. 如果之前安装过Docker，可以使用下面命令卸载"></a>一. 如果之前安装过Docker，可以使用下面命令卸载</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure></div>

<h2 id="二-设置Docker镜像源"><a href="#二-设置Docker镜像源" class="headerlink" title="二. 设置Docker镜像源"></a>二. 设置Docker镜像源</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></div>


<h2 id="三-安装"><a href="#三-安装" class="headerlink" title="三. 安装"></a>三. 安装</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure></div>


<h2 id="四-启动、停止、重启docker命令"><a href="#四-启动、停止、重启docker命令" class="headerlink" title="四. 启动、停止、重启docker命令"></a>四. 启动、停止、重启docker命令</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动docker服务</span></span><br><span class="line">systemctl start docker  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止docker服务</span></span><br><span class="line">systemctl stop docker  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">systemctl restart docker  </span><br></pre></td></tr></table></figure></div>


<p>输入 <code>systemctl status docker</code> 查看docker启动状态 如下图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux-insert-docker/docker-status.png"
                      alt="image"
                ></p>
<p>输入 <code>docker -v</code> 查看docker版本</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux-insert-docker/docker-version.png"
                      alt="image"
                ></p>
<h2 id="五-配置镜像加速"><a href="#五-配置镜像加速" class="headerlink" title="五. 配置镜像加速"></a>五. 配置镜像加速</h2><p>可以使用自己的阿里云账号配置(没有账号的话建议注册一下) 详情查看文档 &#x3D;&#x3D;&#x3D;&gt; <a herf="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">容器镜像服务</a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux-insert-docker/docker-mirrors.png"
                      alt="image"
                ></p>
<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo前缀针对非root用户且有sudo权限的用户 视情况加与不加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将配置写入文件</span></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://7pvmk0yu.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></div>

<h2 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h2><p>如果遇到一些问题 可以试着关闭防火墙后重试</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否关闭防火墙</span></span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure></div>






]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL一些语句汇总</title>
    <url>/mysql-sentense-summary/</url>
    <content><![CDATA[<h1 id="查询数据库中一个或两个字段重复的"><a href="#查询数据库中一个或两个字段重复的" class="headerlink" title="查询数据库中一个或两个字段重复的"></a>查询数据库中一个或两个字段重复的</h1><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> count</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">table</span>`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> field1, field2</span><br><span class="line"><span class="keyword">HAVING</span> count <span class="operator">&gt;</span> <span class="number">1</span>;    </span><br></pre></td></tr></table></figure></div>


<h1 id="截断某张表"><a href="#截断某张表" class="headerlink" title="截断某张表"></a>截断某张表</h1><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> `<span class="keyword">table</span>`;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP一些函数方法汇总</title>
    <url>/php-function/</url>
    <content><![CDATA[<h1 id="数组多键排序"><a href="#数组多键排序" class="headerlink" title="数组多键排序"></a>数组多键排序</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$tempArr</span> = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chinese&#x27;</span> =&gt; <span class="string">&#x27;99&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;math&#x27;</span>    =&gt; <span class="string">&#x27;91&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;english&#x27;</span> =&gt; <span class="string">&#x27;87&#x27;</span>,</span><br><span class="line">    ], [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="string">&#x27;小华&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chinese&#x27;</span> =&gt; <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;math&#x27;</span>    =&gt; <span class="string">&#x27;94&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;english&#x27;</span> =&gt; <span class="string">&#x27;89&#x27;</span>,</span><br><span class="line">    ], [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chinese&#x27;</span> =&gt; <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;math&#x27;</span>    =&gt; <span class="string">&#x27;91&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;english&#x27;</span> =&gt; <span class="string">&#x27;98&#x27;</span>,</span><br><span class="line">    ], [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="string">&#x27;小丽&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chinese&#x27;</span> =&gt; <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;math&#x27;</span>    =&gt; <span class="string">&#x27;94&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;english&#x27;</span> =&gt; <span class="string">&#x27;98&#x27;</span>,</span><br><span class="line">    ], [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="string">&#x27;小强&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chinese&#x27;</span> =&gt; <span class="string">&#x27;98&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;math&#x27;</span>    =&gt; <span class="string">&#x27;92&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;english&#x27;</span> =&gt; <span class="string">&#x27;87&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="variable">$sorted</span> = <span class="title function_ invoke__">collect</span>(<span class="variable">$tempArr</span>)-&gt;<span class="title function_ invoke__">sortBy</span>(function (<span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%d-%s-%s&#x27;</span>, <span class="variable">$item</span>[<span class="string">&#x27;chinese&#x27;</span>], <span class="variable">$item</span>[<span class="string">&#x27;math&#x27;</span>], <span class="variable">$item</span>[<span class="string">&#x27;english&#x27;</span>]);</span><br><span class="line">&#125;, SORT_REGULAR, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sorted</span>-&gt;<span class="title function_ invoke__">each</span>(function (<span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$item</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="title function_ invoke__">collect</span>(<span class="variable">$tempArr</span>)-&gt;<span class="title function_ invoke__">sort</span>(function (<span class="variable">$a</span>, <span class="variable">$b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span>[<span class="string">&#x27;chinese&#x27;</span>] != <span class="variable">$b</span>[<span class="string">&#x27;chinese&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$b</span>[<span class="string">&#x27;chinese&#x27;</span>] &lt;=&gt; <span class="variable">$a</span>[<span class="string">&#x27;chinese&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span>[<span class="string">&#x27;math&#x27;</span>] != <span class="variable">$b</span>[<span class="string">&#x27;math&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$b</span>[<span class="string">&#x27;math&#x27;</span>] &lt;=&gt; <span class="variable">$a</span>[<span class="string">&#x27;math&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$b</span>[<span class="string">&#x27;english&#x27;</span>] &lt;=&gt; <span class="variable">$a</span>[<span class="string">&#x27;english&#x27;</span>];</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">each</span>(function (<span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$item</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><ol>
<li>定义一个 $tempArr 数组，包含了 5 名学生的姓名（name）、语文成绩（chinese）、数学成绩（math）以及英语成绩（english）。</li>
<li>使用 Laravel 的 <code>collect()</code> 函数把 <code>$tempArr</code> 数组转换成一个集合（Collection）对象，然后调用 <code>sortBy()</code>方法对集合中的元素进行排序。<code>sortBy()</code> 方法需要一个回调函数作为参数，这个回调函数决定了排序的规则。</li>
<li>在回调函数内部，使用 sprintf() 函数为每个学生生成一个字符串，格式为：<code>chinese-math-english</code>。这个字符串将作为排序的依据。</li>
<li><code>sortBy()</code> 方法还有两个额外的参数：排序依据类型（<code>SORT_REGULAR</code>）和排序方向（<code>true</code>）。这里设置为 <code>SORT_REGULAR</code> 说明按照正常比较的方式（即数字按大小，字符串按字典序）进行排序，<code>true</code> 表示降序排序（从大到小）。</li>
<li>排序完成后，使用 <code>each()</code> 方法依次迭代集合中的元素。<code>each()</code> 方法接受一个回调函数作为参数，在此回调函数内部，可以访问到当前元素以及元素的索引（键值）。</li>
</ol>
<h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><ol>
<li>首先比较两个元素的<code>chinese</code>。如果它们不相等，则用合并比较运算符<code>&lt;=&gt;</code>比较它们，并返回结果。注意：<code>$b[&#39;chinese&#39;] &lt;=&gt; $a[&#39;chinese&#39;]</code> 这种写法是为了降序排列。因此，成绩较高的元素会排在较低的元素之前。</li>
<li>如果<code>chinese</code>相等，比较函数会继续比较两个元素的<code>math</code>。如果它们不相等，同样使用合并比较运算符<code>&lt;=&gt;</code>进行比较，并返回结果。这里同样是降序排列。</li>
<li>如果<code>math</code>也相等，最后比较<code>english</code>。与前两次比较一样，使用合并比较运算符<code>&lt;=&gt;</code>进行降序排序。</li>
</ol>
<h1 id="查询任意一个字符串是否存在另一个字符串中"><a href="#查询任意一个字符串是否存在另一个字符串中" class="headerlink" title="查询任意一个字符串是否存在另一个字符串中"></a>查询任意一个字符串是否存在另一个字符串中</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$match</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$string</span>, <span class="variable">$keywords</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/(&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$keywords</span>) . <span class="string">&#x27;)/&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">bool</span>) <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$keywords</span> = [<span class="string">&#x27;物流&#x27;</span>, <span class="string">&#x27;配送&#x27;</span>, <span class="string">&#x27;送货&#x27;</span>, <span class="string">&#x27;司机&#x27;</span>];</span><br><span class="line"><span class="variable">$string</span>   = <span class="string">&quot;这里有一个关于物流配送的例子&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span>      = <span class="variable">$match</span>(<span class="variable">$string</span>, <span class="variable">$keywords</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出true</span></span><br></pre></td></tr></table></figure></div>

<h2 id="代码解释-1"><a href="#代码解释-1" class="headerlink" title="代码解释"></a>代码解释</h2><p><code>strpos()</code> 只针对于一个字符串，所以这里用正则匹配更好一点</p>
<h1 id="两个数组取交集"><a href="#两个数组取交集" class="headerlink" title="两个数组取交集"></a>两个数组取交集</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array1</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable">$array2</span> = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$intersection</span> = <span class="title function_ invoke__">array_intersect</span>(<span class="variable">$array1</span>, <span class="variable">$array2</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$intersection</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="代码解释-2"><a href="#代码解释-2" class="headerlink" title="代码解释"></a>代码解释</h2><ol>
<li>在上面的示例中，<code>array_intersect()</code> 函数接受两个数组 <code>$array1</code> 和 <code>$array2</code> 作为参数，并返回它们的交集。最后，使用 <code>print_r()</code> 函数打印交集数组。</li>
<li>请注意，交集数组中的元素保留了原始数组中的键。如果你想重置键，可以使用 <code>array_values()</code> 函数对交集数组进行重新索引：</li>
</ol>
<h1 id="json-encode时遇到-n解决办法"><a href="#json-encode时遇到-n解决办法" class="headerlink" title="json_encode时遇到\n解决办法"></a>json_encode时遇到\n解决办法</h1><p>当你使用<code>json_decode</code>函数将包含<code>\n</code>的字符串转换为数组时，可能会出现错误。这是因为<code>\n</code>是一个特殊的转义字符，表示换行符。在PHP中，当你使用双引号字符串时，<code>\n</code>会被解析为换行符，而不是作为字符串的一部分。</p>
<p>例如，如果你有以下代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$jsonString</span> = <span class="string">&#x27;&#123;&quot;field&quot;: &quot;Hello\nWorld&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$array</span>      = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$jsonString</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>

<p>在这种情况下，<code>json_decode</code>将无法正确解析包含<code>\n</code>的字符串，因为它会尝试将其解析为换行符。这将导致无效的JSON格式，从而引发错误。</p>
<p>为了解决这个问题，你可以使用<code>addslashes</code>函数在填充字段之前对字符串进行转义，或者使用<code>json_encode</code>函数在将数组转换为JSON字符串之前对字段进行转义。这样可以确保<code>\n</code>被正确地转义为<code>\\n</code>，而不会被解析为换行符。</p>
<p>以下是使用<code>addslashes</code>函数转义字段的示例：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fieldValue</span>         = <span class="string">&quot;Hello\nWorld&quot;</span>;</span><br><span class="line"><span class="variable">$escapedFieldValue</span>  = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$fieldValue</span>);</span><br><span class="line"><span class="variable">$jsonString</span>         = <span class="string">&#x27;&#123;&quot;field&quot;: &quot;&#x27;</span>.<span class="variable">$escapedFieldValue</span>.<span class="string">&#x27;&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$array</span>              = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$jsonString</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>

<p>或者，你可以直接使用<code>json_encode</code>函数来处理整个数组，而不是手动构建JSON字符串：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span>        = <span class="keyword">array</span>(<span class="string">&quot;field&quot;</span> =&gt; <span class="string">&quot;Hello\nWorld&quot;</span>);</span><br><span class="line"><span class="variable">$jsonString</span>   = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="variable">$decodedArray</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$jsonString</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>

<p>这样，<code>\n</code>将被正确地转义为<code>\\n</code>，并且<code>json_decode</code>函数将能够正确地解析JSON字符串并将其转换为数组。</p>
<h1 id="简单加密手机号方式"><a href="#简单加密手机号方式" class="headerlink" title="简单加密手机号方式"></a>简单加密手机号方式</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encryptPhone</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$phone</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$phone</span>) == <span class="number">11</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">substr_replace</span>(<span class="variable">$phone</span>, <span class="string">&#x27;****&#x27;</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;***********&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<h1 id="判断某个点位是否存在一个经纬度区域"><a href="#判断某个点位是否存在一个经纬度区域" class="headerlink" title="判断某个点位是否存在一个经纬度区域"></a>判断某个点位是否存在一个经纬度区域</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$polygon</span> = <span class="keyword">new</span> <span class="title class_">\League\Geotools\Polygon\Polygon</span>([</span><br><span class="line">    [<span class="number">48.9675969</span>, <span class="number">1.7440796</span>],</span><br><span class="line">    [<span class="number">48.4711003</span>, <span class="number">2.5268555</span>],</span><br><span class="line">    [<span class="number">48.9279131</span>, <span class="number">3.1448364</span>],</span><br><span class="line">    [<span class="number">49.3895245</span>, <span class="number">2.6119995</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$polygon</span>-&gt;<span class="title function_ invoke__">setPrecision</span>(<span class="number">5</span>); <span class="comment">// set the comparision precision</span></span><br><span class="line"><span class="variable">$polygon</span>-&gt;<span class="title function_ invoke__">pointInPolygon</span>(<span class="keyword">new</span> <span class="title class_">\League\Geotools\Coordinate\Coordinate</span>([<span class="number">49.1785607</span>, <span class="number">2.4444580</span>])); <span class="comment">// true</span></span><br><span class="line"><span class="variable">$polygon</span>-&gt;<span class="title function_ invoke__">pointInPolygon</span>(<span class="keyword">new</span> <span class="title class_">\League\Geotools\Coordinate\Coordinate</span>([<span class="number">49.1785607</span>, <span class="number">5</span>])); <span class="comment">// false</span></span><br><span class="line"><span class="variable">$polygon</span>-&gt;<span class="title function_ invoke__">pointOnBoundary</span>(<span class="keyword">new</span> <span class="title class_">\League\Geotools\Coordinate\Coordinate</span>([<span class="number">48.7193486</span>, <span class="number">2.13546755</span>])); <span class="comment">// true</span></span><br><span class="line"><span class="variable">$polygon</span>-&gt;<span class="title function_ invoke__">pointOnBoundary</span>(<span class="keyword">new</span> <span class="title class_">\League\Geotools\Coordinate\Coordinate</span>([<span class="number">47.1587188</span>, <span class="number">2.87841795</span>])); <span class="comment">// false</span></span><br><span class="line"><span class="variable">$polygon</span>-&gt;<span class="title function_ invoke__">pointOnVertex</span>(<span class="keyword">new</span> <span class="title class_">\League\Geotools\Coordinate\Coordinate</span>([<span class="number">48.4711003</span>, <span class="number">2.5268555</span>])); <span class="comment">// true</span></span><br><span class="line"><span class="variable">$polygon</span>-&gt;<span class="title function_ invoke__">pointOnVertex</span>(<span class="keyword">new</span> <span class="title class_">\League\Geotools\Coordinate\Coordinate</span>([<span class="number">49.1785607</span>, <span class="number">2.4444580</span>])); <span class="comment">// false</span></span><br><span class="line"><span class="variable">$polygon</span>-&gt;<span class="title function_ invoke__">getBoundingBox</span>(); <span class="comment">// return the BoundingBox object</span></span><br></pre></td></tr></table></figure></div>

<h2 id="代码解释-3"><a href="#代码解释-3" class="headerlink" title="代码解释"></a>代码解释</h2><p>它可以帮助您知道点 (坐标) 是在多边形中还是在多边形的边界上，以及点是否在多边形的顶点上。</p>
<h2 id="composer包详情"><a href="#composer包详情" class="headerlink" title="composer包详情"></a>composer包详情</h2><p><a class="link"   href="https://packagist.org/packages/league/geotools" >https://packagist.org/packages/league/geotools <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><strong>这个包里面可以提供了一个方法：它可以帮助您了解一个点（坐标）是在多边形中还是在多边形的边界上，以及它是否在多边形的顶点上</strong></p>
<ul>
<li>针对一个或一 组提供商以串行&#x2F;并行方式批处理地理编码和反向地理编码请求</li>
<li>使用PSR-6缓存地理编码和反向地理编码结果以提高性能</li>
<li>在命令行界面(CLI) + 转储程序和格式化程序中计算地理编码和反向地理编码</li>
<li>接受几乎所有类型的 WGS84 地理坐标作为坐标。</li>
<li>支持23 种不同的椭圆体，如果需要，可以轻松提供新的椭圆体</li>
<li>将十进制度坐标转换并格式化为十进制度分或度分秒坐标。</li>
<li>在通用横轴墨卡托(UTM) 投影中转换十进制坐标 </li>
<li>使用flat 、 great circle 、haversine或vincenty算法计算两个坐标之间以米（默认）、km 、mi或ft为单位的距离</li>
<li>计算从原点坐标到目标坐标的 初始和最终方位角（以度为单位）</li>
<li>计算从原点坐标到目标坐标的初始和最终基点（方向），在wikipedia中阅读更多内容</li>
<li>计算起点坐标和终点坐标之间的中点（坐标）</li>
<li>使用以度为单位的给定方位和以米为单位的距离计算目的地点（坐标）</li>
<li>将坐标编码为地理哈希字符串并将其解码为坐标，请在 维基百科和geohash.org上阅读更多内容</li>
<li>通过 10:10 算法对坐标进行编码</li>
<li>Polygon类提供了检查 poing（坐标）在多边形边界内或边界上的方法。</li>
<li>Distance 、Point 、Geohash和Convert类的命令行界面( CLI)</li>
</ul>
<h1 id="根据一个url获得携带的参数"><a href="#根据一个url获得携带的参数" class="headerlink" title="根据一个url获得携带的参数"></a>根据一个url获得携带的参数</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getParamsByUrl</span>(<span class="params">Request <span class="variable">$request</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$arr</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">url</span>());</span><br><span class="line">    <span class="title function_ invoke__">parse_str</span>(<span class="variable">$arr</span>[<span class="string">&#x27;query&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>, <span class="variable">$query</span>);</span><br><span class="line">    <span class="comment">//unset鉴权</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$query</span>[<span class="string">&#x27;access_token&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$query</span>[<span class="string">&#x27;access_token&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$query</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;&#x27;</span> === <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$query</span>[<span class="variable">$k</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$v</span>)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$v</span> <span class="keyword">as</span> <span class="variable">$kk</span> =&gt; <span class="variable">$vv</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&#x27;&#x27;</span> === <span class="variable">$vv</span>) &#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="variable">$query</span>[<span class="variable">$k</span>][<span class="variable">$kk</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$query</span> ?? [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="加密解密示例"><a href="#加密解密示例" class="headerlink" title="加密解密示例"></a>加密解密示例</h1><p>加密</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeilingEncryptCryptUtilService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$aesKey</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$encodingAesKey</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;aesKey = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\s+/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$encodingAesKey</span>), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">list</span>(<span class="variable">$cipherKey</span>, <span class="variable">$iv</span>) = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">prepareKeyAndIv</span>(<span class="variable">$this</span>-&gt;aesKey);</span><br><span class="line">            <span class="variable">$encodedContent</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encode</span>(<span class="variable">$content</span>);</span><br><span class="line">            <span class="variable">$encrypted</span>      = <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$encodedContent</span>, <span class="string">&#x27;AES-256-CBC&#x27;</span>, <span class="variable">$cipherKey</span>, OPENSSL_RAW_DATA, <span class="variable">$iv</span>);</span><br><span class="line">            <span class="variable">$result</span>         = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$encrypted</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Error occurred during encryption: &quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prepareKeyAndIv</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$cipherKey</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$key</span>, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="variable">$iv</span>        = <span class="title function_ invoke__">substr</span>(<span class="variable">$key</span>, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$cipherKey</span>, <span class="variable">$iv</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$contentLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>);</span><br><span class="line">        <span class="variable">$networkOrder</span>  = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">number2BytesNetworkOrder</span>(<span class="variable">$contentLength</span>);</span><br><span class="line">        <span class="variable">$randomString</span>  = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRandomString</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$pad</span> = <span class="number">32</span> - (<span class="variable">$contentLength</span> % <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$pad</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$pad</span> = <span class="number">32</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$padString</span>      = <span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$pad</span>), <span class="variable">$pad</span>);</span><br><span class="line">        <span class="variable">$encodedContent</span> = <span class="variable">$randomString</span> . <span class="variable">$networkOrder</span> . <span class="variable">$content</span> . <span class="variable">$padString</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$encodedContent</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">number2BytesNetworkOrder</span>(<span class="params"><span class="variable">$number</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$bytesInNetworkOrder</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$bytesInNetworkOrder</span> = <span class="title function_ invoke__">chr</span>((<span class="variable">$number</span> &gt;&gt; (<span class="number">8</span> * (<span class="number">3</span> - <span class="variable">$i</span>))) &amp; <span class="number">0xFF</span>) . <span class="variable">$bytesInNetworkOrder</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$bytesInNetworkOrder</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRandomString</span>(<span class="params"><span class="variable">$length</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$characters</span>   = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">        <span class="variable">$charLen</span>      = <span class="title function_ invoke__">strlen</span>(<span class="variable">$characters</span>);</span><br><span class="line">        <span class="variable">$randomString</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$randomString</span> .= <span class="variable">$characters</span>[<span class="title function_ invoke__">rand</span>(<span class="number">0</span>, <span class="variable">$charLen</span> - <span class="number">1</span>)];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$randomString</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<p>解密</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeilingCallbackCryptUtilService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$aesKey</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$encodingAesKey</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;aesKey = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\s+/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$encodingAesKey</span>), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params"><span class="variable">$encryptedText</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">list</span>(<span class="variable">$cipherKey</span>, <span class="variable">$iv</span>) = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">prepareKeyAndIv</span>(<span class="variable">$this</span>-&gt;aesKey);</span><br><span class="line">            <span class="variable">$decrypted</span> = <span class="title function_ invoke__">openssl_decrypt</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$encryptedText</span>), <span class="string">&#x27;AES-256-CBC&#x27;</span>, <span class="variable">$cipherKey</span>, <span class="number">7</span>, <span class="variable">$iv</span>);</span><br><span class="line">            <span class="variable">$result</span>    = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decode</span>(<span class="variable">$decrypted</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prepareKeyAndIv</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$cipherKey</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$key</span>, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="variable">$iv</span>        = <span class="title function_ invoke__">substr</span>(<span class="variable">$key</span>, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$cipherKey</span>, <span class="variable">$iv</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$decrypted</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$pad</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$decrypted</span>[<span class="title function_ invoke__">strlen</span>(<span class="variable">$decrypted</span>) - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$pad</span> &lt; <span class="number">1</span> || <span class="variable">$pad</span> &gt; <span class="number">32</span>) &#123;</span><br><span class="line">            <span class="variable">$pad</span> = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$content</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$decrypted</span>, <span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$decrypted</span>) - <span class="variable">$pad</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$networkOrder</span>  = <span class="title function_ invoke__">substr</span>(<span class="variable">$content</span>, <span class="number">16</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="variable">$contentLength</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">bytesNetworkOrder2Number</span>(<span class="variable">$networkOrder</span>);</span><br><span class="line">        <span class="variable">$trueContent</span>   = <span class="title function_ invoke__">substr</span>(<span class="variable">$content</span>, <span class="number">20</span>, <span class="variable">$contentLength</span>);</span><br><span class="line">        <span class="variable">$pad</span>           = <span class="title function_ invoke__">ord</span>(<span class="variable">$trueContent</span>[<span class="title function_ invoke__">strlen</span>(<span class="variable">$trueContent</span>) - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$trueContent</span>, <span class="number">0</span>, -<span class="number">1</span> * <span class="variable">$pad</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bytesNetworkOrder2Number</span>(<span class="params"><span class="variable">$bytesInNetworkOrder</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$sourceNumber</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$sourceNumber</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$sourceNumber</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$bytesInNetworkOrder</span>[<span class="variable">$i</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$sourceNumber</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>







]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP坐标转换类</title>
    <url>/php_coordinate/</url>
    <content><![CDATA[   <div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">   <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Service</span>\<span class="title class_">Common</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoordinateService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">x_PI</span> = <span class="number">52.35987755982988</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PI</span>   = <span class="number">3.1415926535897932384626</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">a</span>    = <span class="number">6378245.0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ee</span>   = <span class="number">0.00669342162296594323</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//高德地图用的就是火星坐标系(GCJ-02)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 百度坐标系(BD-09) 转 火星坐标系(GCJ-02)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $bd_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $bd_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bd09ToGcj02</span>(<span class="params"><span class="variable">$bd_lon</span>, <span class="variable">$bd_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$x</span>     = <span class="variable">$bd_lon</span> - <span class="number">0.0065</span>;</span><br><span class="line">        <span class="variable">$y</span>     = <span class="variable">$bd_lat</span> - <span class="number">0.006</span>;</span><br><span class="line">        <span class="variable">$z</span>     = <span class="title function_ invoke__">sqrt</span>(<span class="variable">$x</span> * <span class="variable">$x</span> + <span class="variable">$y</span> * <span class="variable">$y</span>) - <span class="number">0.00002</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$y</span> * <span class="built_in">self</span>::<span class="variable constant_">x_PI</span>);</span><br><span class="line">        <span class="variable">$theta</span> = <span class="title function_ invoke__">atan2</span>(<span class="variable">$y</span>, <span class="variable">$x</span>) - <span class="number">0.000003</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$x</span> * <span class="built_in">self</span>::<span class="variable constant_">x_PI</span>);</span><br><span class="line">        <span class="variable">$g_lon</span> = <span class="variable">$z</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$theta</span>);</span><br><span class="line">        <span class="variable">$g_lat</span> = <span class="variable">$z</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$theta</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;lon&#x27;</span> =&gt; <span class="variable">$g_lon</span>, <span class="string">&#x27;lat&#x27;</span> =&gt; <span class="variable">$g_lat</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 火星坐标系(GCJ-02) 转 百度坐标系(BD-09)</span></span><br><span class="line"><span class="comment">     * 即谷歌、高德 转 百度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $g_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $g_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">gcj02Tobd09</span>(<span class="params"><span class="variable">$g_lon</span>, <span class="variable">$g_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$z</span>      = <span class="title function_ invoke__">sqrt</span>(<span class="variable">$g_lon</span> * <span class="variable">$g_lon</span> + <span class="variable">$g_lat</span> * <span class="variable">$g_lat</span>) + <span class="number">0.00002</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$g_lat</span> * <span class="built_in">self</span>::<span class="variable constant_">x_PI</span>);</span><br><span class="line">        <span class="variable">$theta</span>  = <span class="title function_ invoke__">atan2</span>(<span class="variable">$g_lat</span>, <span class="variable">$g_lon</span>) + <span class="number">0.000003</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$g_lon</span> * <span class="built_in">self</span>::<span class="variable constant_">x_PI</span>);</span><br><span class="line">        <span class="variable">$bd_lon</span> = <span class="variable">$z</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$theta</span>) + <span class="number">0.0065</span>;</span><br><span class="line">        <span class="variable">$bd_lat</span> = <span class="variable">$z</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$theta</span>) + <span class="number">0.006</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;lon&#x27;</span> =&gt; <span class="variable">$bd_lon</span>, <span class="string">&#x27;lat&#x27;</span> =&gt; <span class="variable">$bd_lat</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WGS84 转 GCj02</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $w_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $w_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">wgs84ToGcj02</span>(<span class="params"><span class="variable">$w_lon</span>, <span class="variable">$w_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$dlat</span>      = <span class="built_in">self</span>::<span class="title function_ invoke__">transFormLat</span>(<span class="variable">$w_lon</span> - <span class="number">105.0</span>, <span class="variable">$w_lat</span> - <span class="number">35.0</span>);</span><br><span class="line">        <span class="variable">$dlon</span>      = <span class="built_in">self</span>::<span class="title function_ invoke__">transFormLon</span>(<span class="variable">$w_lon</span> - <span class="number">105.0</span>, <span class="variable">$w_lat</span> - <span class="number">35.0</span>);</span><br><span class="line">        <span class="variable">$radlat</span>    = <span class="variable">$w_lat</span> / <span class="number">180.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>;</span><br><span class="line">        <span class="variable">$magic</span>     = <span class="title function_ invoke__">sin</span>(<span class="variable">$radlat</span>);</span><br><span class="line">        <span class="variable">$magic</span>     = <span class="number">1</span> - <span class="built_in">self</span>::<span class="variable constant_">ee</span> * <span class="variable">$magic</span> * <span class="variable">$magic</span>;</span><br><span class="line">        <span class="variable">$sqrtmagic</span> = <span class="title function_ invoke__">sqrt</span>(<span class="variable">$magic</span>);</span><br><span class="line">        <span class="variable">$dlat</span>      = (<span class="variable">$dlat</span> * <span class="number">180.0</span>) / ((<span class="built_in">self</span>::<span class="variable constant_">a</span> * (<span class="number">1</span> - <span class="built_in">self</span>::<span class="variable constant_">ee</span>)) / (<span class="variable">$magic</span> * <span class="variable">$sqrtmagic</span>) * <span class="built_in">self</span>::<span class="variable constant_">PI</span>);</span><br><span class="line">        <span class="variable">$dlon</span>      = (<span class="variable">$dlon</span> * <span class="number">180.0</span>) / (<span class="built_in">self</span>::<span class="variable constant_">a</span> / <span class="variable">$sqrtmagic</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$radlat</span>) * <span class="built_in">self</span>::<span class="variable constant_">PI</span>);</span><br><span class="line">        <span class="variable">$g_lat</span>     = <span class="variable">$w_lat</span> + <span class="variable">$dlat</span>;</span><br><span class="line">        <span class="variable">$g_lon</span>     = <span class="variable">$w_lon</span> + <span class="variable">$dlon</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;lon&#x27;</span> =&gt; <span class="variable">$g_lon</span>, <span class="string">&#x27;lat&#x27;</span> =&gt; <span class="variable">$g_lat</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GCJ02 转换为 WGS84</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $g_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $g_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">gcj02ToWgs84</span>(<span class="params"><span class="variable">$g_lon</span>, <span class="variable">$g_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$dlat</span>      = <span class="built_in">self</span>::<span class="title function_ invoke__">transFormLat</span>(<span class="variable">$g_lon</span> - <span class="number">105.0</span>, <span class="variable">$g_lat</span> - <span class="number">35.0</span>);</span><br><span class="line">        <span class="variable">$dlon</span>      = <span class="built_in">self</span>::<span class="title function_ invoke__">transFormLon</span>(<span class="variable">$g_lon</span> - <span class="number">105.0</span>, <span class="variable">$g_lat</span> - <span class="number">35.0</span>);</span><br><span class="line">        <span class="variable">$radlat</span>    = <span class="variable">$g_lat</span> / <span class="number">180.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>;</span><br><span class="line">        <span class="variable">$magic</span>     = <span class="title function_ invoke__">sin</span>(<span class="variable">$radlat</span>);</span><br><span class="line">        <span class="variable">$magic</span>     = <span class="number">1</span> - <span class="built_in">self</span>::<span class="variable constant_">ee</span> * <span class="variable">$magic</span> * <span class="variable">$magic</span>;</span><br><span class="line">        <span class="variable">$sqrtmagic</span> = <span class="title function_ invoke__">sqrt</span>(<span class="variable">$magic</span>);</span><br><span class="line">        <span class="variable">$dlat</span>      = (<span class="variable">$dlat</span> * <span class="number">180.0</span>) / ((<span class="built_in">self</span>::<span class="variable constant_">a</span> * (<span class="number">1</span> - <span class="built_in">self</span>::<span class="variable constant_">ee</span>)) / (<span class="variable">$magic</span> * <span class="variable">$sqrtmagic</span>) * <span class="built_in">self</span>::<span class="variable constant_">PI</span>);</span><br><span class="line">        <span class="variable">$dlon</span>      = (<span class="variable">$dlon</span> * <span class="number">180.0</span>) / (<span class="built_in">self</span>::<span class="variable constant_">a</span> / <span class="variable">$sqrtmagic</span> * <span class="title function_ invoke__">cos</span>(<span class="variable">$radlat</span>) * <span class="built_in">self</span>::<span class="variable constant_">PI</span>);</span><br><span class="line">        <span class="variable">$w_lat</span>     = <span class="variable">$g_lat</span> + <span class="variable">$dlat</span>;</span><br><span class="line">        <span class="variable">$w_lon</span>     = <span class="variable">$g_lon</span> + <span class="variable">$dlon</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;lon&#x27;</span> =&gt; <span class="variable">$w_lon</span>, <span class="string">&#x27;lat&#x27;</span> =&gt; <span class="variable">$w_lat</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BD09 转换为 WGS84</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $bd_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $bd_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bd09ToWgs84</span>(<span class="params"><span class="variable">$bd_lon</span>, <span class="variable">$bd_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$gcj02</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">bd09ToGcj02</span>(<span class="variable">$bd_lon</span>, <span class="variable">$bd_lat</span>);</span><br><span class="line">        <span class="variable">$g_lon</span> = <span class="variable">$gcj02</span>[<span class="string">&#x27;lon&#x27;</span>];</span><br><span class="line">        <span class="variable">$g_lat</span> = <span class="variable">$gcj02</span>[<span class="string">&#x27;lat&#x27;</span>];</span><br><span class="line">        <span class="variable">$wgs84</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">gcj02ToWgs84</span>(<span class="variable">$g_lon</span>, <span class="variable">$g_lat</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$wgs84</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WGS84 转换为 BD09</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $w_lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $w_lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">wgs84ToBd09</span>(<span class="params"><span class="variable">$w_lon</span>, <span class="variable">$w_lat</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$gcj02</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">wgs84ToGcj02</span>(<span class="variable">$w_lon</span>, <span class="variable">$w_lat</span>);</span><br><span class="line">        <span class="variable">$g_lon</span> = <span class="variable">$gcj02</span>[<span class="string">&#x27;lon&#x27;</span>];</span><br><span class="line">        <span class="variable">$g_lat</span> = <span class="variable">$gcj02</span>[<span class="string">&#x27;lat&#x27;</span>];</span><br><span class="line">        <span class="variable">$bd09</span>  = <span class="built_in">self</span>::<span class="title function_ invoke__">gcj02Tobd09</span>(<span class="variable">$g_lon</span>, <span class="variable">$g_lat</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$bd09</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">transFormLat</span>(<span class="params"><span class="variable">$lon</span>, <span class="variable">$lat</span></span>): <span class="title">float</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = -<span class="number">100.0</span> + <span class="number">2.0</span> * <span class="variable">$lon</span> + <span class="number">3.0</span> * <span class="variable">$lat</span> + <span class="number">0.2</span> * <span class="variable">$lat</span> * <span class="variable">$lat</span> + <span class="number">0.1</span> * <span class="variable">$lon</span> * <span class="variable">$lat</span> + <span class="number">0.2</span> * <span class="title function_ invoke__">sqrt</span>(<span class="title function_ invoke__">abs</span>(<span class="variable">$lon</span>));</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="number">6.0</span> * <span class="variable">$lon</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="number">2.0</span> * <span class="variable">$lon</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lat</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">40.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lat</span> / <span class="number">3.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">160.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lat</span> / <span class="number">12.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">320</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lat</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span> / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换经度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">transFormLon</span>(<span class="params"><span class="variable">$lon</span>, <span class="variable">$lat</span></span>): <span class="title">float</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="number">300.0</span> + <span class="variable">$lon</span> + <span class="number">2.0</span> * <span class="variable">$lat</span> + <span class="number">0.1</span> * <span class="variable">$lon</span> * <span class="variable">$lon</span> + <span class="number">0.1</span> * <span class="variable">$lon</span> * <span class="variable">$lat</span> + <span class="number">0.1</span> * <span class="title function_ invoke__">sqrt</span>(<span class="title function_ invoke__">abs</span>(<span class="variable">$lon</span>));</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="number">6.0</span> * <span class="variable">$lon</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="number">2.0</span> * <span class="variable">$lon</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">20.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lon</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">40.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lon</span> / <span class="number">3.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="variable">$ret</span> += (<span class="number">150.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lon</span> / <span class="number">12.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>) + <span class="number">300.0</span> * <span class="title function_ invoke__">sin</span>(<span class="variable">$lon</span> / <span class="number">30.0</span> * <span class="built_in">self</span>::<span class="variable constant_">PI</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>






]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
